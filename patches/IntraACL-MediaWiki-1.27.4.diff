Patch: intraacl-rights
Type: feature
MediaWiki: REL1_27 1.27.4 bcd2d0fbb917425d008f2d4f78c36be05bee4e63

Patch needed for IntraACL extension. Enables read access checks
in various parts of MediaWiki.

2013-03-25 - Do not cloak page and category links in article content
2013-03-29 - Still register dependencies for unreadable images and templates
2013-07-31 - Check permissions for email notifications
2013-08-27 - Check permissions in API
2013-09-25 - Support parser cache key personalisation
2013-12-06 - Use hook for parser cache key personalisation, disable title patch in LinkBatch
2013-12-09 - Disable parser patch during wfIsBadImage check
2013-12-12 - Check permissions in findBySha1() of file repo - fixes duplicate upload errors
2014-01-10 - DBMS-side filtering of page lists based on read permissions
2014-01-13 - Fix infinite recursion in case of special page whitelist with $wgGroupPermissions['*']['read'] == false
2014-06-18 - Add hook to allow checking for non-readable uploads
2016-08-04 - Fix crash when trying to reupload non-accessible upload

diff --git a/includes/CategoryViewer.php b/includes/CategoryViewer.php
index 389b077474..ff33c62dab 100644
--- a/includes/CategoryViewer.php
+++ b/includes/CategoryViewer.php
@@ -262,6 +262,11 @@ class CategoryViewer extends ContextSource {
 	 * @param bool $isRedirect
 	 */
 	function addPage( $title, $sortkey, $pageLength, $isRedirect = false ) {
+		// <IntraACL>
+		if ( !$title->userCan( 'read' ) ) {
+			return;
+		}
+		// </IntraACL>
 		global $wgContLang;
 
 		$this->articles[] = $this->generateLink( 'page', $title, $isRedirect );
diff --git a/includes/FeedUtils.php b/includes/FeedUtils.php
index d7dbd2292e..a46c0bf430 100644
--- a/includes/FeedUtils.php
+++ b/includes/FeedUtils.php
@@ -115,11 +115,9 @@ class FeedUtils {
 					$actiontext,
 					Linker::formatComment( $comment ) ] ) ) . "</p>\n";
 
-		// NOTE: Check permissions for anonymous users, not current user.
-		//       No "privileged" version should end up in the cache.
-		//       Most feed readers will not log in anyway.
-		$anon = new User();
-		$accErrors = $title->getUserPermissionsErrors( 'read', $anon, true );
+		// NOTE: Check permissions for current user. -- IntraACL
+		global $wgUser;
+		$accErrors = $title->getUserPermissionsErrors( 'read', $wgUser, true );
 
 		// Can't diff special pages, unreadable pages or pages with no new revision
 		// to compare against: just return the text.
diff --git a/includes/GlobalFunctions.php b/includes/GlobalFunctions.php
index 831cccd0fa..c8567b3837 100644
--- a/includes/GlobalFunctions.php
+++ b/includes/GlobalFunctions.php
@@ -3581,8 +3581,18 @@ function wfUnpack( $format, $data, $length = false ) {
 function wfIsBadImage( $name, $contextTitle = false, $blacklist = null ) {
 	# Handle redirects; callers almost always hit wfFindFile() anyway,
 	# so just use that method because it has a fast process cache.
+// <IntraACL>
+	if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+		$hacl = haclfDisableTitlePatch();
+	}
+// </IntraACL>
 	$file = wfFindFile( $name ); // get the final name
-	$name = $file ? $file->getTitle()->getDBkey() : $name;
+// <IntraACL>
+	if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+		haclfRestoreTitlePatch( $hacl );
+	}
+// </IntraACL>
+	$name = $file && $file->getTitle()->userCan( 'read' ) ? $file->getTitle()->getDBkey() : $name;
 
 	# Run the extension hook
 	$bad = false;
diff --git a/includes/Linker.php b/includes/Linker.php
index 70488c5a9b..ed6d9e6fd6 100644
--- a/includes/Linker.php
+++ b/includes/Linker.php
@@ -2098,6 +2098,10 @@ class Linker {
 						[],
 						[ 'action' => 'edit' ]
 					);
+				// <IntraACL>
+				} elseif ( !$titleObj->userCan( 'read' ) ) {
+					continue;
+				// </IntraACL>
 				} else {
 					$editLink = self::link(
 						$titleObj,
diff --git a/includes/OutputPage.php b/includes/OutputPage.php
index c04d3b43f2..36cfd5cfca 100644
--- a/includes/OutputPage.php
+++ b/includes/OutputPage.php
@@ -1318,6 +1318,12 @@ class OutputPage extends ContextSource {
 			'OutputPageMakeCategoryLinks',
 			[ &$outputPage, $categories, &$this->mCategoryLinks ] )
 		) {
+// <IntraACL>
+            // Do not cloak category links during display
+            if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+                    $etc = haclfDisableTitlePatch();
+            }
+// </IntraACL>
 			foreach ( $categories as $category => $type ) {
 				// array keys will cast numeric category names to ints, so cast back to string
 				$category = (string)$category;
@@ -1334,6 +1340,11 @@ class OutputPage extends ContextSource {
 				$this->mCategories[] = $title->getText();
 				$this->mCategoryLinks[$type][] = Linker::link( $title, $text );
 			}
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 		}
 	}
 
@@ -2434,7 +2445,14 @@ class OutputPage extends ContextSource {
 			# not especially useful as a returnto parameter. Use the title
 			# from the request instead, if there was one.
 			$request = $this->getRequest();
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				// IntraACL -- do not produce "&returnto=Access_Denied" links
+				$hacl = haclfDisableTitlePatch();
+			}
 			$returnto = Title::newFromText( $request->getVal( 'title', '' ) );
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			if ( $action == 'edit' ) {
 				$msg = 'whitelistedittext';
 				$displayReturnto = $returnto;
@@ -2649,7 +2667,9 @@ class OutputPage extends ContextSource {
 		}
 		// We don't want people to return to external interwiki. That
 		// might potentially be used as part of a phishing scheme
-		if ( !is_object( $titleObj ) || $titleObj->isExternal() ) {
+		// <IntraACL>
+		if ( !is_object( $titleObj ) || $titleObj->isExternal() || !$titleObj->userCan( 'read' ) ) {
+		// </IntraACL>
 			$titleObj = Title::newMainPage();
 		}
 
diff --git a/includes/Title.php b/includes/Title.php
index 33b7f03db1..f7cbde6b93 100644
--- a/includes/Title.php
+++ b/includes/Title.php
@@ -224,7 +224,9 @@ class Title implements LinkTarget {
 
 		try {
 			$t->secureAndSplit();
-			return $t;
+			// <IntraACL>
+			return $t->checkAccessControl();
+			// </IntraACL>
 		} catch ( MalformedTitleException $ex ) {
 			return null;
 		}
@@ -333,7 +335,9 @@ class Title implements LinkTarget {
 		if ( $defaultNamespace == NS_MAIN ) {
 			$titleCache->set( $text, $t );
 		}
-		return $t;
+		// <IntraACL>
+		return $t->checkAccessControl();
+		// </IntraACL>
 	}
 
 	/**
@@ -365,7 +369,9 @@ class Title implements LinkTarget {
 
 		try {
 			$t->secureAndSplit();
-			return $t;
+			// <IntraACL>
+			return $t->checkAccessControl();
+			// </IntraACL>
 		} catch ( MalformedTitleException $ex ) {
 			return null;
 		}
@@ -531,6 +537,9 @@ class Title implements LinkTarget {
 		$t->mUrlform = wfUrlencode( $t->mDbkeyform );
 		$t->mTextform = strtr( $title, '_', ' ' );
 		$t->mContentModel = false; # initialized lazily in getContentModel()
+		// <IntraACL>
+		$t = $t->checkAccessControl();
+		// </IntraACL>
 		return $t;
 	}
 
@@ -555,7 +564,9 @@ class Title implements LinkTarget {
 
 		try {
 			$t->secureAndSplit();
-			return $t;
+			// <IntraACL>
+			return $t->checkAccessControl();
+			// </IntraACL>
 		} catch ( MalformedTitleException $ex ) {
 			return null;
 		}
@@ -2415,6 +2426,12 @@ class Title implements LinkTarget {
 					$whitelisted = true;
 				}
 			} elseif ( $this->isSpecialPage() ) {
+				// <IntraACL>
+				// Disable title patch here to avoid infinite recursion
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					$hacl = haclfDisableTitlePatch();
+				}
+				// </IntraACL>
 				# If it's a special page, ditch the subpage bit and check again
 				$name = $this->getDBkey();
 				list( $name, /* $subpage */ ) = SpecialPageFactory::resolveAlias( $name );
@@ -2424,6 +2441,11 @@ class Title implements LinkTarget {
 						$whitelisted = true;
 					}
 				}
+				// <IntraACL>
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					haclfRestoreTitlePatch( $hacl );
+				}
+				// </IntraACL>
 			}
 		}
 
@@ -4851,4 +4873,67 @@ class Title implements LinkTarget {
 		$this->mTextform = strtr( $this->mDbkeyform, '_', ' ' );
 	}
 
+// <IntraACL>
+	/**
+	 * This function checks, if this title is accessible for the action of the
+	 * current request. If the action is unknown it is assumed to be "read".
+	 * If the title is not accessible, the new title "Permission denied" is
+	 * returned. This is a fallback to protect titles if all other security
+	 * patches fail.
+	 *
+	 * While a page is rendered, the same title is often checked several times.
+	 * To speed things up, the results of an accessibility check are internally
+	 * cached.
+	 *
+	 * This function can be disabled in HACL_Initialize.php or LocalSettings.php
+	 * by setting the variable $haclgEnableTitleCheck = false.
+	 *
+	 * @return
+	 * 		$this, if access is granted on this title or
+	 * 		the title for "Permission denied" if not.
+	 */
+	private function checkAccessControl() {
+		if ( !defined( 'HACL_HALOACL_VERSION' ) ) {
+			// IntraACL is disabled or not fully initialized
+			return $this;
+		}
+		global $haclgEnableTitleCheck;
+		if ( isset( $haclgEnableTitleCheck ) && $haclgEnableTitleCheck === false ) {
+			return $this;
+		}
+		static $permissionCache = array();
+
+		$action = 'read';
+		$index = $this->getFullText().'-'.$action;
+		$allowed = @$permissionCache[$index];
+		if ( !isset( $allowed ) ) {
+			switch ( $action ) {
+				case 'create':
+				case 'move':
+				case 'delete':
+					$allowed = $this->userCan( $action );
+					break;
+				case 'edit':
+					// If the article does not exist and edit right was requested,
+					// check for create right.
+					$allowed = $this->userCan( $this->exists() ? 'edit' : 'create' );
+					break;
+				default:
+					// If the user has no read access to a non-existing page,
+					// but has the right to create it - allow him to "read" it
+					$allowed = $this->userCan( 'read' ) || !$this->exists() && $this->userCan( 'create' );
+			}
+			$permissionCache[$index] = $allowed;
+		}
+		if ( $allowed === false ) {
+			global $haclgContLang;
+			$etc = $haclgEnableTitleCheck;
+			$haclgEnableTitleCheck = false;
+			$t = Title::newFromURL( $haclgContLang->getPermissionDeniedPage() );
+			$haclgEnableTitleCheck = $etc;
+			return $t;
+		}
+		return $this;
+	}
+// </IntraACL>
 }
diff --git a/includes/api/ApiBase.php b/includes/api/ApiBase.php
index 1ef70e24a5..f03b7acff4 100644
--- a/includes/api/ApiBase.php
+++ b/includes/api/ApiBase.php
@@ -862,6 +862,11 @@ abstract class ApiBase extends ContextSource {
 				$this->dieUsageMsg( [ 'nosuchpageid', $params['pageid'] ] );
 			}
 		}
+		// <IntraACL>
+		if ( !$pageObj->getTitle()->userCan( 'read' ) ) {
+			$this->dieUsageMsg( array( 'permission-denied' ) );
+		}
+		// </IntraACL>
 
 		return $pageObj;
 	}
diff --git a/includes/api/ApiExpandTemplates.php b/includes/api/ApiExpandTemplates.php
index 286fe887c3..bf0110ec56 100644
--- a/includes/api/ApiExpandTemplates.php
+++ b/includes/api/ApiExpandTemplates.php
@@ -66,6 +66,11 @@ class ApiExpandTemplates extends ApiBase {
 				$this->dieUsageMsg( [ 'invalidtitle', $params['title'] ] );
 			}
 		}
+		// <IntraACL>
+		if ( !$title_obj->userCan( 'read' ) ) {
+			$this->dieUsageMsg( array( 'invalidtitle', $params['title'] ) );
+		}
+		// </IntraACL>
 
 		$result = $this->getResult();
 
diff --git a/includes/api/ApiImageRotate.php b/includes/api/ApiImageRotate.php
index 2b9935341b..90e5d90e77 100644
--- a/includes/api/ApiImageRotate.php
+++ b/includes/api/ApiImageRotate.php
@@ -68,7 +68,7 @@ class ApiImageRotate extends ApiBase {
 		self::addValues( $result, $pageSet->getMissingRevisionIDs(), 'missing', 'revid' );
 		self::addValues( $result, $pageSet->getInterwikiTitlesAsResult() );
 
-		foreach ( $pageSet->getTitles() as $title ) {
+		foreach ( $pageSet->getGoodTitles() as $title ) {
 			$r = [];
 			$r['id'] = $title->getArticleID();
 			ApiQueryBase::addTitleInfo( $r, $title );
diff --git a/includes/api/ApiMove.php b/includes/api/ApiMove.php
index 29e67b07cd..c71e746076 100644
--- a/includes/api/ApiMove.php
+++ b/includes/api/ApiMove.php
@@ -50,13 +50,17 @@ class ApiMove extends ApiBase {
 			}
 		}
 
-		if ( !$fromTitle->exists() ) {
+		// <IntraACL>
+		if ( !$fromTitle->exists() || !$fromTitle->userCan( 'read' ) ) {
+		// </IntraACL>
 			$this->dieUsageMsg( 'notanarticle' );
 		}
 		$fromTalk = $fromTitle->getTalkPage();
 
 		$toTitle = Title::newFromText( $params['to'] );
-		if ( !$toTitle || $toTitle->isExternal() ) {
+		// <IntraACL>
+		if ( !$toTitle || $toTitle->isExternal() || !$toTitle->userCan( 'read' ) ) {
+		// </IntraACL>
 			$this->dieUsageMsg( [ 'invalidtitle', $params['to'] ] );
 		}
 		$toTalk = $toTitle->getTalkPage();
diff --git a/includes/api/ApiPageSet.php b/includes/api/ApiPageSet.php
index 78346694da..b3e95b97cd 100644
--- a/includes/api/ApiPageSet.php
+++ b/includes/api/ApiPageSet.php
@@ -732,6 +732,11 @@ class ApiPageSet extends ApiBase {
 	public function processDbRow( $row ) {
 		// Store Title object in various data structures
 		$title = Title::newFromRow( $row );
+		// <IntraACL>
+		if ( !$title->userCan( 'read' ) ) {
+			return false;
+		}
+		// </IntraACL>
 
 		$pageId = intval( $row->page_id );
 		$this->mAllPages[$row->page_namespace][$row->page_title] = $pageId;
@@ -748,6 +753,7 @@ class ApiPageSet extends ApiBase {
 		foreach ( $this->mRequestedPageFields as $fieldName => &$fieldValues ) {
 			$fieldValues[$pageId] = $row->$fieldName;
 		}
+		return true;
 	}
 
 	/**
@@ -839,8 +845,11 @@ class ApiPageSet extends ApiBase {
 			foreach ( $res as $row ) {
 				$pageId = intval( $row->page_id );
 
+				// Store any extra fields requested by modules
+				$readable = $this->processDbRow( $row );
+
 				// Remove found page from the list of remaining items
-				if ( isset( $remaining ) ) {
+				if ( $readable && isset( $remaining ) ) {
 					if ( $processTitles ) {
 						unset( $remaining[$row->page_namespace][$row->page_title] );
 					} else {
@@ -848,9 +857,6 @@ class ApiPageSet extends ApiBase {
 					}
 				}
 
-				// Store any extra fields requested by modules
-				$this->processDbRow( $row );
-
 				// Need gender information
 				if ( MWNamespace::hasGenderDistinction( $row->page_namespace ) ) {
 					$usernames[] = $row->page_title;
@@ -922,13 +928,11 @@ class ApiPageSet extends ApiBase {
 				$pageid = intval( $row->rev_page );
 				$this->mGoodRevIDs[$revid] = $pageid;
 				$this->mLiveRevIDs[$revid] = $pageid;
-				$pageids[$pageid] = '';
+				$pageids[$pageid][] = $revid;
 				unset( $remaining[$revid] );
 			}
 		}
 
-		$this->mMissingRevIDs = array_keys( $remaining );
-
 		// Populate all the page information
 		$this->initFromPageIds( array_keys( $pageids ) );
 
@@ -974,6 +978,20 @@ class ApiPageSet extends ApiBase {
 
 			$this->mMissingRevIDs = array_keys( $remaining );
 		}
+		// <IntraACL>
+		foreach ( $pageids as $pageid => $revids ) {
+			if ( !isset( $this->mGoodTitles[$pageid] ) ) {
+				// Page is unreadable, remove revisions from good list
+				foreach ( $revids as $revid ) {
+					unset( $this->mGoodRevIDs[$revid] );
+					unset( $this->mLiveRevIDs[$revid] );
+					$remaining[$revid] = true;
+				}
+			}
+		}
+		// </IntraACL>
+
+		$this->mMissingRevIDs = array_keys( $remaining );
 	}
 
 	/**
@@ -1044,6 +1062,11 @@ class ApiPageSet extends ApiBase {
 			);
 			$this->mResolvedRedirectTitles[$from] = $this->mPendingRedirectIDs[$rdfrom];
 			unset( $this->mPendingRedirectIDs[$rdfrom] );
+			// <IntraACL>
+			if ( !$to->userCan( 'read' ) ) {
+				continue;
+			}
+			// </IntraACL>
 			if ( $to->isExternal() ) {
 				$this->mInterwikiTitles[$to->getPrefixedText()] = $to->getInterwiki();
 			} elseif ( !isset( $this->mAllPages[$row->rd_namespace][$row->rd_title] ) ) {
@@ -1107,6 +1130,11 @@ class ApiPageSet extends ApiBase {
 			if ( is_string( $title ) ) {
 				try {
 					$titleObj = Title::newFromTextThrow( $title, $this->mDefaultNamespace );
+					// <IntraACL>
+					if ( !$titleObj->userCan( 'read' ) ) {
+						throw new MalformedTitleException( 'title-permission-denied', $title );
+					}
+					// </IntraACL>
 				} catch ( MalformedTitleException $ex ) {
 					// Handle invalid titles gracefully
 					$this->mAllPages[0][$title] = $this->mFakePageId;
diff --git a/includes/api/ApiParse.php b/includes/api/ApiParse.php
index 2fb4db1f73..2c9e7f9e92 100644
--- a/includes/api/ApiParse.php
+++ b/includes/api/ApiParse.php
@@ -115,6 +115,7 @@ class ApiParse extends ApiBase {
 				}
 
 				$titleObj = $rev->getTitle();
+
 				$wgTitle = $titleObj;
 				$pageObj = WikiPage::factory( $titleObj );
 				$popts = $this->makeParserOptions( $pageObj, $params );
@@ -203,6 +204,11 @@ class ApiParse extends ApiBase {
 			if ( !$titleObj || $titleObj->isExternal() ) {
 				$this->dieUsageMsg( [ 'invalidtitle', $title ] );
 			}
+			// <IntraACL>
+			if ( !$titleObj->userCan( 'read' ) ) {
+				$this->dieUsage( "You are not allowed to read this article", 'permissiondenied' );
+			}
+			// </IntraACL>
 			$wgTitle = $titleObj;
 			if ( $titleObj->canExist() ) {
 				$pageObj = WikiPage::factory( $titleObj );
diff --git a/includes/api/ApiQueryAllCategories.php b/includes/api/ApiQueryAllCategories.php
index 614b06c0b5..43ab7ea217 100644
--- a/includes/api/ApiQueryAllCategories.php
+++ b/includes/api/ApiQueryAllCategories.php
@@ -124,6 +124,11 @@ class ApiQueryAllCategories extends ApiQueryGeneratorBase {
 
 			// Normalize titles
 			$titleObj = Title::makeTitle( NS_CATEGORY, $row->cat_title );
+			// <IntraACL>
+			if ( !$titleObj->userCan( 'read' ) ) {
+				continue;
+			}
+			// </IntraACL>
 			if ( !is_null( $resultPageSet ) ) {
 				$pages[] = $titleObj;
 			} else {
diff --git a/includes/api/ApiQueryAllImages.php b/includes/api/ApiQueryAllImages.php
index 6aeee683d0..2437e55745 100644
--- a/includes/api/ApiQueryAllImages.php
+++ b/includes/api/ApiQueryAllImages.php
@@ -289,6 +289,11 @@ class ApiQueryAllImages extends ApiQueryGeneratorBase {
 
 			if ( is_null( $resultPageSet ) ) {
 				$file = $repo->newFileFromRow( $row );
+				// <IntraACL>
+				if ( !$file ) {
+					continue;
+				}
+				// </IntraACL>
 				$info = array_merge( [ 'name' => $row->img_name ],
 					ApiQueryImageInfo::getInfo( $file, $prop, $result ) );
 				self::addTitleInfo( $info, $file->getTitle() );
diff --git a/includes/api/ApiQueryAllLinks.php b/includes/api/ApiQueryAllLinks.php
index ac906056a3..a969d97196 100644
--- a/includes/api/ApiQueryAllLinks.php
+++ b/includes/api/ApiQueryAllLinks.php
@@ -206,8 +206,13 @@ class ApiQueryAllLinks extends ApiQueryGeneratorBase {
 				if ( $fld_ids ) {
 					$vals['fromid'] = intval( $row->pl_from );
 				}
+				$title = Title::makeTitle( $namespace, $row->pl_title );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				if ( $fld_title ) {
-					$title = Title::makeTitle( $namespace, $row->pl_title );
 					ApiQueryBase::addTitleInfo( $vals, $title );
 				}
 				foreach ( $this->props as $name => $field ) {
diff --git a/includes/api/ApiQueryAllMessages.php b/includes/api/ApiQueryAllMessages.php
index f1d787b8b3..07272fcaa9 100644
--- a/includes/api/ApiQueryAllMessages.php
+++ b/includes/api/ApiQueryAllMessages.php
@@ -49,7 +49,9 @@ class ApiQueryAllMessages extends ApiQueryBase {
 		if ( $params['enableparser'] ) {
 			if ( !is_null( $params['title'] ) ) {
 				$title = Title::newFromText( $params['title'] );
-				if ( !$title || $title->isExternal() ) {
+				// <IntraACL>
+				if ( !$title || $title->isExternal() || !$title->userCan( 'read' ) ) {
+				// </IntraACL>
 					$this->dieUsageMsg( [ 'invalidtitle', $params['title'] ] );
 				}
 			} else {
diff --git a/includes/api/ApiQueryAllPages.php b/includes/api/ApiQueryAllPages.php
index 0ce1939b28..8e08737303 100644
--- a/includes/api/ApiQueryAllPages.php
+++ b/includes/api/ApiQueryAllPages.php
@@ -222,6 +222,11 @@ class ApiQueryAllPages extends ApiQueryGeneratorBase {
 
 			if ( is_null( $resultPageSet ) ) {
 				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				$vals = [
 					'pageid' => intval( $row->page_id ),
 					'ns' => intval( $title->getNamespace() ),
diff --git a/includes/api/ApiQueryBacklinks.php b/includes/api/ApiQueryBacklinks.php
index fb502e40e7..0ba0282dbb 100644
--- a/includes/api/ApiQueryBacklinks.php
+++ b/includes/api/ApiQueryBacklinks.php
@@ -186,6 +186,11 @@ class ApiQueryBacklinks extends ApiQueryGeneratorBase {
 
 			$this->pageMap[$row->page_namespace][$row->page_title] = $row->page_id;
 			$t = Title::makeTitle( $row->page_namespace, $row->page_title );
+			// <IntraACL>
+			if ( !$t->userCan( 'read' ) ) {
+				continue;
+			}
+			// </IntraACL>
 			if ( $row->page_is_redirect ) {
 				$this->redirTitles[] = $t;
 			}
@@ -309,9 +314,15 @@ class ApiQueryBacklinks extends ApiQueryGeneratorBase {
 				$this->cont[] = $row->page_id;
 			}
 
+			$t = Title::makeTitle( $row->page_namespace, $row->page_title );
+			// <IntraACL>
+			if ( !$t->userCan( 'read' ) ) {
+				continue;
+			}
+			// </IntraACL>
 			if ( is_null( $resultPageSet ) ) {
 				$a['pageid'] = intval( $row->page_id );
-				ApiQueryBase::addTitleInfo( $a, Title::makeTitle( $row->page_namespace, $row->page_title ) );
+				ApiQueryBase::addTitleInfo( $a, $t );
 				if ( $row->page_is_redirect ) {
 					$a['redirect'] = true;
 				}
diff --git a/includes/api/ApiQueryCategories.php b/includes/api/ApiQueryCategories.php
index 63d0f6da13..85478557b0 100644
--- a/includes/api/ApiQueryCategories.php
+++ b/includes/api/ApiQueryCategories.php
@@ -73,7 +73,7 @@ class ApiQueryCategories extends ApiQueryGeneratorBase {
 			$cats = [];
 			foreach ( $params['categories'] as $cat ) {
 				$title = Title::newFromText( $cat );
-				if ( !$title || $title->getNamespace() != NS_CATEGORY ) {
+				if ( !$title || $title->getNamespace() != NS_CATEGORY || !$title->userCan( 'read' ) ) {
 					$this->setWarning( "\"$cat\" is not a category" );
 				} else {
 					$cats[] = $title->getDBkey();
@@ -141,6 +141,11 @@ class ApiQueryCategories extends ApiQueryGeneratorBase {
 				}
 
 				$title = Title::makeTitle( NS_CATEGORY, $row->cl_to );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				$vals = [];
 				ApiQueryBase::addTitleInfo( $vals, $title );
 				if ( isset( $prop['sortkey'] ) ) {
diff --git a/includes/api/ApiQueryCategoryMembers.php b/includes/api/ApiQueryCategoryMembers.php
index 4865ad56f9..dec69765e6 100644
--- a/includes/api/ApiQueryCategoryMembers.php
+++ b/includes/api/ApiQueryCategoryMembers.php
@@ -249,8 +249,13 @@ class ApiQueryCategoryMembers extends ApiQueryGeneratorBase {
 				if ( $fld_ids ) {
 					$vals['pageid'] = intval( $row->page_id );
 				}
+				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				if ( $fld_title ) {
-					$title = Title::makeTitle( $row->page_namespace, $row->page_title );
 					ApiQueryBase::addTitleInfo( $vals, $title );
 				}
 				if ( $fld_sortkey ) {
diff --git a/includes/api/ApiQueryDeletedrevs.php b/includes/api/ApiQueryDeletedrevs.php
index d58efa1d5a..f06a615771 100644
--- a/includes/api/ApiQueryDeletedrevs.php
+++ b/includes/api/ApiQueryDeletedrevs.php
@@ -408,6 +408,15 @@ class ApiQueryDeletedrevs extends ApiQueryBase {
 					$a['token'] = $token;
 				}
 				$fit = $result->addValue( [ 'query', $this->getModuleName() ], $pageID, $a );
+				// <IntraACL>
+				if ( $title->userCan( 'read' ) ) {
+				// </IntraACL>
+					ApiQueryBase::addTitleInfo( $a, $title );
+					if ( $fld_token ) {
+						$a['token'] = $token;
+					}
+					$fit = $result->addValue( [ 'query', $this->getModuleName() ], $pageID, $a );
+				}
 			} else {
 				$pageID = $pageMap[$row->ar_namespace][$row->ar_title];
 				$fit = $result->addValue(
diff --git a/includes/api/ApiQueryExtLinksUsage.php b/includes/api/ApiQueryExtLinksUsage.php
index 9b055377ef..1dac98bdb7 100644
--- a/includes/api/ApiQueryExtLinksUsage.php
+++ b/includes/api/ApiQueryExtLinksUsage.php
@@ -121,8 +121,13 @@ class ApiQueryExtLinksUsage extends ApiQueryGeneratorBase {
 				if ( $fld_ids ) {
 					$vals['pageid'] = intval( $row->page_id );
 				}
+				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				if ( $fld_title ) {
-					$title = Title::makeTitle( $row->page_namespace, $row->page_title );
 					ApiQueryBase::addTitleInfo( $vals, $title );
 				}
 				if ( $fld_url ) {
diff --git a/includes/api/ApiQueryFilearchive.php b/includes/api/ApiQueryFilearchive.php
index 03be491e7c..acce46de4a 100644
--- a/includes/api/ApiQueryFilearchive.php
+++ b/includes/api/ApiQueryFilearchive.php
@@ -165,6 +165,11 @@ class ApiQueryFilearchive extends ApiQueryBase {
 			$file['id'] = (int)$row->fa_id;
 			$file['name'] = $row->fa_name;
 			$title = Title::makeTitle( NS_FILE, $row->fa_name );
+			// <IntraACL>
+			if ( !$title->userCan( 'read' ) ) {
+				continue;
+			}
+			// </IntraACL>
 			self::addTitleInfo( $file, $title );
 
 			if ( $fld_description &&
diff --git a/includes/api/ApiQueryIWBacklinks.php b/includes/api/ApiQueryIWBacklinks.php
index 75681077de..f137dc0688 100644
--- a/includes/api/ApiQueryIWBacklinks.php
+++ b/includes/api/ApiQueryIWBacklinks.php
@@ -129,6 +129,11 @@ class ApiQueryIWBacklinks extends ApiQueryGeneratorBase {
 				$entry = [ 'pageid' => $row->page_id ];
 
 				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				ApiQueryBase::addTitleInfo( $entry, $title );
 
 				if ( $row->page_is_redirect ) {
diff --git a/includes/api/ApiQueryImages.php b/includes/api/ApiQueryImages.php
index e04d8c888f..eeb0050028 100644
--- a/includes/api/ApiQueryImages.php
+++ b/includes/api/ApiQueryImages.php
@@ -89,7 +89,7 @@ class ApiQueryImages extends ApiQueryGeneratorBase {
 			$images = [];
 			foreach ( $params['images'] as $img ) {
 				$title = Title::newFromText( $img );
-				if ( !$title || $title->getNamespace() != NS_FILE ) {
+				if ( !$title || $title->getNamespace() != NS_FILE || !$title->userCan( 'read' ) ) {
 					$this->setWarning( "\"$img\" is not a file" );
 				} else {
 					$images[] = $title->getDBkey();
@@ -110,7 +110,13 @@ class ApiQueryImages extends ApiQueryGeneratorBase {
 					break;
 				}
 				$vals = [];
-				ApiQueryBase::addTitleInfo( $vals, Title::makeTitle( NS_FILE, $row->il_to ) );
+				$title = Title::makeTitle( NS_FILE, $row->il_to );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
+				ApiQueryBase::addTitleInfo( $vals, $title );
 				$fit = $this->addPageSubItem( $row->il_from, $vals );
 				if ( !$fit ) {
 					$this->setContinueEnumParameter( 'continue', $row->il_from . '|' . $row->il_to );
diff --git a/includes/api/ApiQueryInfo.php b/includes/api/ApiQueryInfo.php
index b94f5674f4..4be7b2d2ee 100644
--- a/includes/api/ApiQueryInfo.php
+++ b/includes/api/ApiQueryInfo.php
@@ -324,14 +324,20 @@ class ApiQueryInfo extends ApiQueryBase {
 			$cont = explode( '|', $this->params['continue'] );
 			$this->dieContinueUsageIf( count( $cont ) != 2 );
 			$conttitle = Title::makeTitleSafe( $cont[0], $cont[1] );
-			foreach ( $this->everything as $pageid => $title ) {
-				if ( Title::compare( $title, $conttitle ) >= 0 ) {
-					break;
+			// <IntraACL>
+			if ( $conttitle && $conttitle->userCan( 'read' ) ) {
+			// </IntraACL>
+				foreach ( $this->everything as $pageid => $title ) {
+					if ( Title::compare( $title, $conttitle ) >= 0 ) {
+						break;
+					}
+					unset( $this->titles[$pageid] );
+					unset( $this->missing[$pageid] );
+					unset( $this->everything[$pageid] );
 				}
-				unset( $this->titles[$pageid] );
-				unset( $this->missing[$pageid] );
-				unset( $this->everything[$pageid] );
+			// <IntraACL>
 			}
+			// </IntraACL>
 		}
 
 		$this->pageRestrictions = $pageSet->getCustomField( 'page_restrictions' );
diff --git a/includes/api/ApiQueryLangBacklinks.php b/includes/api/ApiQueryLangBacklinks.php
index a6153de961..fe3e0d94c5 100644
--- a/includes/api/ApiQueryLangBacklinks.php
+++ b/includes/api/ApiQueryLangBacklinks.php
@@ -128,6 +128,11 @@ class ApiQueryLangBacklinks extends ApiQueryGeneratorBase {
 				$entry = [ 'pageid' => $row->page_id ];
 
 				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				ApiQueryBase::addTitleInfo( $entry, $title );
 
 				if ( $row->page_is_redirect ) {
diff --git a/includes/api/ApiQueryLinks.php b/includes/api/ApiQueryLinks.php
index 6e5239f7b9..3feecb7e57 100644
--- a/includes/api/ApiQueryLinks.php
+++ b/includes/api/ApiQueryLinks.php
@@ -93,7 +93,7 @@ class ApiQueryLinks extends ApiQueryGeneratorBase {
 			$lb = new LinkBatch;
 			foreach ( $params[$this->titlesParam] as $t ) {
 				$title = Title::newFromText( $t );
-				if ( !$title ) {
+				if ( !$title || !$title->userCan( 'read' ) ) {
 					$this->setWarning( "\"$t\" is not a valid title" );
 				} else {
 					$lb->addObj( $title );
@@ -153,7 +153,13 @@ class ApiQueryLinks extends ApiQueryGeneratorBase {
 					break;
 				}
 				$vals = [];
-				ApiQueryBase::addTitleInfo( $vals, Title::makeTitle( $row->pl_namespace, $row->pl_title ) );
+				$title = Title::makeTitle( $row->pl_namespace, $row->pl_title );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
+				ApiQueryBase::addTitleInfo( $vals, $title );
 				$fit = $this->addPageSubItem( $row->pl_from, $vals );
 				if ( !$fit ) {
 					$this->setContinueEnumParameter( 'continue',
diff --git a/includes/api/ApiQueryLogEvents.php b/includes/api/ApiQueryLogEvents.php
index 122594d175..69ec35f3a9 100644
--- a/includes/api/ApiQueryLogEvents.php
+++ b/includes/api/ApiQueryLogEvents.php
@@ -172,7 +172,9 @@ class ApiQueryLogEvents extends ApiQueryBase {
 		$title = $params['title'];
 		if ( !is_null( $title ) ) {
 			$titleObj = Title::newFromText( $title );
-			if ( is_null( $titleObj ) ) {
+			// <IntraACL>
+			if ( is_null( $titleObj ) || !$titleObj->userCan( 'read' ) ) {
+			// </IntraACL>
 				$this->dieUsage( "Bad title value '$title'", 'param_title' );
 			}
 			$this->addWhereFld( 'log_namespace', $titleObj->getNamespace() );
@@ -277,9 +279,12 @@ class ApiQueryLogEvents extends ApiQueryBase {
 			$vals['logid'] = intval( $row->log_id );
 		}
 
-		if ( $this->fld_title || $this->fld_parsedcomment ) {
-			$title = Title::makeTitle( $row->log_namespace, $row->log_title );
+		$title = Title::makeTitle( $row->log_namespace, $row->log_title );
+		// <IntraACL>
+		if ( !$title->userCan( 'read' ) ) {
+			return false;
 		}
+		// </IntraACL>
 
 		if ( $this->fld_title || $this->fld_ids || $this->fld_details && $row->log_params !== '' ) {
 			if ( LogEventsList::isDeleted( $row, LogPage::DELETED_ACTION ) ) {
diff --git a/includes/api/ApiQueryPagesWithProp.php b/includes/api/ApiQueryPagesWithProp.php
index f1f4d9a453..c8984a3985 100644
--- a/includes/api/ApiQueryPagesWithProp.php
+++ b/includes/api/ApiQueryPagesWithProp.php
@@ -105,8 +105,13 @@ class ApiQueryPagesWithProp extends ApiQueryGeneratorBase {
 				if ( $fld_ids ) {
 					$vals['pageid'] = (int)$row->page_id;
 				}
+				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				if ( $fld_title ) {
-					$title = Title::makeTitle( $row->page_namespace, $row->page_title );
 					ApiQueryBase::addTitleInfo( $vals, $title );
 				}
 				if ( $fld_value ) {
diff --git a/includes/api/ApiQueryProtectedTitles.php b/includes/api/ApiQueryProtectedTitles.php
index e3c949bd3b..4f134aa3ff 100644
--- a/includes/api/ApiQueryProtectedTitles.php
+++ b/includes/api/ApiQueryProtectedTitles.php
@@ -112,6 +112,11 @@ class ApiQueryProtectedTitles extends ApiQueryGeneratorBase {
 
 			$title = Title::makeTitle( $row->pt_namespace, $row->pt_title );
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				$vals = [];
 				ApiQueryBase::addTitleInfo( $vals, $title );
 				if ( isset( $prop['timestamp'] ) ) {
diff --git a/includes/api/ApiQueryQueryPage.php b/includes/api/ApiQueryQueryPage.php
index 9ba757c078..1b89166353 100644
--- a/includes/api/ApiQueryQueryPage.php
+++ b/includes/api/ApiQueryQueryPage.php
@@ -97,6 +97,11 @@ class ApiQueryQueryPage extends ApiQueryGeneratorBase {
 
 			$title = Title::makeTitle( $row->namespace, $row->title );
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				$data = [ 'value' => $row->value ];
 				if ( $qp->usesTimestamps() ) {
 					$data['timestamp'] = wfTimestamp( TS_ISO_8601, $row->value );
diff --git a/includes/api/ApiQueryRandom.php b/includes/api/ApiQueryRandom.php
index 00bd467cab..0659c7b6fd 100644
--- a/includes/api/ApiQueryRandom.php
+++ b/includes/api/ApiQueryRandom.php
@@ -98,6 +98,11 @@ class ApiQueryRandom extends ApiQueryGeneratorBase {
 			}
 			if ( is_null( $resultPageSet ) ) {
 				$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					continue;
+				}
+				// </IntraACL>
 				$page = [
 					'id' => (int)$row->page_id,
 				];
diff --git a/includes/api/ApiQueryRecentChanges.php b/includes/api/ApiQueryRecentChanges.php
index f0fd2f4574..40d719664a 100644
--- a/includes/api/ApiQueryRecentChanges.php
+++ b/includes/api/ApiQueryRecentChanges.php
@@ -422,6 +422,11 @@ class ApiQueryRecentChanges extends ApiQueryGeneratorBase {
 	public function extractRowInfo( $row ) {
 		/* Determine the title of the page that has been changed. */
 		$title = Title::makeTitle( $row->rc_namespace, $row->rc_title );
+		// <IntraACL>
+		if ( !$title->userCan( 'read' ) ) {
+			return false;
+		}
+		// </IntraACL>
 		$user = $this->getUser();
 
 		/* Our output data. */
diff --git a/includes/api/ApiQueryRevisionsBase.php b/includes/api/ApiQueryRevisionsBase.php
index 266d6999ba..421fd816a5 100644
--- a/includes/api/ApiQueryRevisionsBase.php
+++ b/includes/api/ApiQueryRevisionsBase.php
@@ -159,6 +159,11 @@ abstract class ApiQueryRevisionsBase extends ApiQueryGeneratorBase {
 	 */
 	protected function extractRevisionInfo( Revision $revision, $row ) {
 		$title = $revision->getTitle();
+		// <IntraACL>
+		if ( !$title->userCan( 'read' ) ) {
+			return NULL;
+		}
+		// </IntraACL>
 		$user = $this->getUser();
 		$vals = [];
 		$anyHidden = false;
diff --git a/includes/api/ApiQuerySearch.php b/includes/api/ApiQuerySearch.php
index f57d3a30cf..b71883ce8d 100644
--- a/includes/api/ApiQuerySearch.php
+++ b/includes/api/ApiQuerySearch.php
@@ -169,6 +169,12 @@ class ApiQuerySearch extends ApiQueryGeneratorBase {
 
 			$title = $result->getTitle();
 			if ( $resultPageSet === null ) {
+				// <IntraACL>
+				if ( !$title->userCan( 'read' ) ) {
+					$result = $matches->next();
+					continue;
+				}
+				// </IntraACL>
 				$vals = [];
 				ApiQueryBase::addTitleInfo( $vals, $title );
 
diff --git a/includes/api/ApiQueryUserContributions.php b/includes/api/ApiQueryUserContributions.php
index 06889709c6..ba308433af 100644
--- a/includes/api/ApiQueryUserContributions.php
+++ b/includes/api/ApiQueryUserContributions.php
@@ -113,6 +113,9 @@ class ApiQueryContributions extends ApiQueryBase {
 			}
 
 			$vals = $this->extractRowInfo( $row );
+			if ( !$vals ) {
+				continue;
+			}
 			$fit = $this->getResult()->addValue( [ 'query', $this->getModuleName() ], null, $vals );
 			if ( !$fit ) {
 				$this->setContinueEnumParameter( 'continue', $this->continueStr( $row ) );
@@ -356,6 +359,11 @@ class ApiQueryContributions extends ApiQueryBase {
 		}
 
 		$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+		// <IntraACL>
+		if ( !$title || !$title->userCan( 'read' ) ) {
+			return false;
+		}
+		// </IntraACL>
 
 		if ( $this->fld_title ) {
 			ApiQueryBase::addTitleInfo( $vals, $title );
diff --git a/includes/api/ApiQueryWatchlist.php b/includes/api/ApiQueryWatchlist.php
index 54211e0fde..ee4633cabf 100644
--- a/includes/api/ApiQueryWatchlist.php
+++ b/includes/api/ApiQueryWatchlist.php
@@ -269,6 +269,11 @@ class ApiQueryWatchlist extends ApiQueryGeneratorBase {
 
 			if ( is_null( $resultPageSet ) ) {
 				$vals = $this->extractRowInfo( $row );
+				// <IntraACL>
+				if ( !$vals ) {
+					continue;
+				}
+				// </IntraACL>
 				$fit = $this->getResult()->addValue( [ 'query', $this->getModuleName() ], null, $vals );
 				if ( !$fit ) {
 					$this->setContinueEnumParameter( 'continue', "$row->rc_timestamp|$row->rc_id" );
@@ -298,6 +303,11 @@ class ApiQueryWatchlist extends ApiQueryGeneratorBase {
 	private function extractRowInfo( $row ) {
 		/* Determine the title of the page that has been changed. */
 		$title = Title::makeTitle( $row->rc_namespace, $row->rc_title );
+		// <IntraACL>
+		if ( !$title || !$title->userCan( 'read' ) ) {
+			return false;
+		}
+		// </IntraACL>
 		$user = $this->getUser();
 
 		/* Our output data. */
diff --git a/includes/api/ApiQueryWatchlistRaw.php b/includes/api/ApiQueryWatchlistRaw.php
index f76b8fbdcb..98a1edddde 100644
--- a/includes/api/ApiQueryWatchlistRaw.php
+++ b/includes/api/ApiQueryWatchlistRaw.php
@@ -130,6 +130,11 @@ class ApiQueryWatchlistRaw extends ApiQueryGeneratorBase {
 			$t = Title::makeTitle( $row->wl_namespace, $row->wl_title );
 
 			if ( is_null( $resultPageSet ) ) {
+				// <IntraACL>
+				if ( !$t || !$t->userCan( 'read' ) ) {
+					return false;
+				}
+				// </IntraACL>
 				$vals = [];
 				ApiQueryBase::addTitleInfo( $vals, $t );
 				if ( isset( $prop['changed'] ) && !is_null( $row->wl_notificationtimestamp ) ) {
diff --git a/includes/cache/LinkBatch.php b/includes/cache/LinkBatch.php
index c5bd29058c..a6013700bd 100644
--- a/includes/cache/LinkBatch.php
+++ b/includes/cache/LinkBatch.php
@@ -150,6 +150,11 @@ class LinkBatch {
 		if ( !$res ) {
 			return [];
 		}
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$etc = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
 
 		// For each returned entry, add it to the list of good links, and remove it from $remaining
 
@@ -171,6 +176,11 @@ class LinkBatch {
 			}
 		}
 
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $etc );
+		}
+		// </IntraACL>
 		return $ids;
 	}
 
diff --git a/includes/changes/ChangesFeed.php b/includes/changes/ChangesFeed.php
index ca6ba48b36..1e3291097b 100644
--- a/includes/changes/ChangesFeed.php
+++ b/includes/changes/ChangesFeed.php
@@ -76,16 +76,17 @@ class ChangesFeed {
 	 * @return null|bool True or null
 	 */
 	public function execute( $feed, $rows, $lastmod, $opts ) {
-		global $wgLang, $wgRenderHashAppend;
+		global $wgLang, $wgRenderHashAppend, $wgUser;
 
 		if ( !FeedUtils::checkFeedOutput( $this->format ) ) {
 			return null;
 		}
 
+		$userid = $wgUser->getId();
 		$optionsHash = md5( serialize( $opts->getAllValues() ) ) . $wgRenderHashAppend;
 		$timekey = wfMemcKey(
-			$this->type, $this->format, $wgLang->getCode(), $optionsHash, 'timestamp' );
-		$key = wfMemcKey( $this->type, $this->format, $wgLang->getCode(), $optionsHash );
+			$this->type, $this->format, $userid, $wgLang->getCode(), $optionsHash, 'timestamp' );
+		$key = wfMemcKey( $this->type, $this->format, $userid, $wgLang->getCode(), $optionsHash );
 
 		FeedUtils::checkPurge( $timekey, $key );
 
@@ -206,6 +207,11 @@ class ChangesFeed {
 
 		foreach ( $sorted as $obj ) {
 			$title = Title::makeTitle( $obj->rc_namespace, $obj->rc_title );
+			// <IntraACL>
+			if ( !$title->userCan( 'read' ) ) {
+				continue;
+			}
+			// </IntraACL>
 			$talkpage = MWNamespace::canTalk( $obj->rc_namespace )
 				? $title->getTalkPage()->getFullURL()
 				: '';
diff --git a/includes/diff/DifferenceEngine.php b/includes/diff/DifferenceEngine.php
index 299af1390d..51b1f4c61c 100644
--- a/includes/diff/DifferenceEngine.php
+++ b/includes/diff/DifferenceEngine.php
@@ -1293,6 +1293,13 @@ class DifferenceEngine extends ContextSource {
 			return false;
 		}
 
+		// <IntraACL>
+		if ( !$this->mNewRev->getTitle()->userCan( 'read' ) ) {
+			$this->mNewRev = false;
+			return false;
+		}
+		// </IntraACL>
+
 		// Update the new revision ID in case it was 0 (makes life easier doing UI stuff)
 		$this->mNewid = $this->mNewRev->getId();
 		$this->mNewPage = $this->mNewRev->getTitle();
@@ -1319,6 +1326,13 @@ class DifferenceEngine extends ContextSource {
 
 		if ( $this->mOldRev ) {
 			$this->mOldPage = $this->mOldRev->getTitle();
+			// <IntraACL>
+			if ( !$this->mOldRev->getTitle()->userCan( 'read' ) ) {
+				$this->mOldid = false;
+				$this->mOldRev = false;
+				return false;
+			}
+			// </IntraACL>
 		}
 
 		// Load tags information for both revisions
diff --git a/includes/filerepo/LocalRepo.php b/includes/filerepo/LocalRepo.php
index 82486993ad..4f3e310541 100644
--- a/includes/filerepo/LocalRepo.php
+++ b/includes/filerepo/LocalRepo.php
@@ -383,7 +383,12 @@ class LocalRepo extends FileRepo {
 
 		$result = [];
 		foreach ( $res as $row ) {
-			$result[] = $this->newFileFromRow( $row );
+			$file = $this->newFileFromRow( $row );
+			// <IntraACL>
+			if ( $file !== NULL ) {
+				$result[] = $file;
+			}
+			// </IntraACL>
 		}
 		$res->free();
 
@@ -416,7 +421,11 @@ class LocalRepo extends FileRepo {
 		$result = [];
 		foreach ( $res as $row ) {
 			$file = $this->newFileFromRow( $row );
-			$result[$file->getSha1()][] = $file;
+			// <IntraACL>
+			if ( $file !== NULL ) {
+				$result[$file->getSha1()][] = $file;
+			}
+			// </IntraACL>
 		}
 		$res->free();
 
@@ -446,7 +455,12 @@ class LocalRepo extends FileRepo {
 		// Build file objects
 		$files = [];
 		foreach ( $res as $row ) {
-			$files[] = $this->newFileFromRow( $row );
+			$file = $this->newFileFromRow( $row );
+			// <IntraACL>
+			if ( $file !== NULL ) {
+				$files[] = $file;
+			}
+			// </IntraACL>
 		}
 
 		return $files;
diff --git a/includes/filerepo/file/LocalFile.php b/includes/filerepo/file/LocalFile.php
index e7a9ea7aa7..8eb67b118d 100644
--- a/includes/filerepo/file/LocalFile.php
+++ b/includes/filerepo/file/LocalFile.php
@@ -154,6 +154,11 @@ class LocalFile extends File {
 	 */
 	static function newFromRow( $row, $repo ) {
 		$title = Title::makeTitle( NS_FILE, $row->img_name );
+		// <IntraACL>
+		if ( !$title->userCan( 'read' ) ) {
+			return NULL;
+		}
+		// </IntraACL>
 		$file = new self( $title, $repo );
 		$file->loadFromRow( $row );
 
diff --git a/includes/logging/LogEventsList.php b/includes/logging/LogEventsList.php
index da5527eb9a..67aee858af 100644
--- a/includes/logging/LogEventsList.php
+++ b/includes/logging/LogEventsList.php
@@ -353,6 +353,11 @@ class LogEventsList extends ContextSource {
 	 */
 	public function logLine( $row ) {
 		$entry = DatabaseLogEntry::newFromRow( $row );
+		// <IntraACL>
+		if ( !$entry->getTarget()->userCan( 'read' ) ) {
+			return '';
+		}
+		// </IntraACL>
 		$formatter = LogFormatter::newFromEntry( $entry );
 		$formatter->setContext( $this->getContext() );
 		$formatter->setShowUserToolLinks( !( $this->flags & self::NO_EXTRA_USER_LINKS ) );
diff --git a/includes/mail/EmailNotification.php b/includes/mail/EmailNotification.php
index 664c1116eb..987d594e58 100644
--- a/includes/mail/EmailNotification.php
+++ b/includes/mail/EmailNotification.php
@@ -236,6 +236,9 @@ class EmailNotification {
 						&& $watchingUser->getId() != $userTalkId
 						&& !in_array( $watchingUser->getName(), $wgUsersNotifiedOnAllChanges )
 						&& !( $wgBlockDisablesLogin && $watchingUser->isBlocked() )
+// <IntraACL>
+						&& !$title->getUserPermissionsErrors( 'read', $watchingUser ) // Check page read access
+// </IntraACL>
 					) {
 						if ( Hooks::run( 'SendWatchlistEmailNotification', [ $watchingUser, $title, $this ] ) ) {
 							$this->compose( $watchingUser, self::WATCHLIST );
@@ -251,7 +254,12 @@ class EmailNotification {
 				continue;
 			}
 			$user = User::newFromName( $name );
-			$this->compose( $user, self::ALL_CHANGES );
+// <IntraACL>
+			if ( !$title->getUserPermissionsErrors( 'read', $user ) ) {
+				// Check page read access
+				$this->compose( $user, self::ALL_CHANGES );
+			}
+// </IntraACL>
 		}
 
 		$this->sendMails();
diff --git a/includes/parser/LinkHolderArray.php b/includes/parser/LinkHolderArray.php
index b07e55fce3..147e022474 100644
--- a/includes/parser/LinkHolderArray.php
+++ b/includes/parser/LinkHolderArray.php
@@ -80,6 +80,12 @@ class LinkHolderArray {
 	 * Recreate the Title objects
 	 */
 	public function __wakeup() {
+// <IntraACL>
+        // LinkHolderArray skips permission checks so page links in parsed content are never cloaked
+        if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+                $etc = haclfDisableTitlePatch();
+        }
+// </IntraACL>
 		foreach ( $this->internals as &$nsLinks ) {
 			foreach ( $nsLinks as &$entry ) {
 				$entry['title'] = Title::newFromText( $entry['pdbk'] );
@@ -92,6 +98,11 @@ class LinkHolderArray {
 			$entry['title'] = Title::newFromText( $entry['pdbk'] );
 		}
 		unset( $entry );
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $etc );
+		}
+		// </IntraACL>
 	}
 
 	/**
@@ -288,6 +299,13 @@ class LinkHolderArray {
 		$linkCache = LinkCache::singleton();
 		$output = $this->parent->getOutput();
 
+		// <IntraACL>
+		// LinkHolderArray skips permission checks so page links in parsed content are never cloaked
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$etc = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
+
 		$dbr = wfGetDB( DB_SLAVE );
 		$threshold = $this->parent->getOptions()->getStubThreshold();
 
@@ -429,6 +447,11 @@ class LinkHolderArray {
 			$text
 		);
 
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $etc );
+		}
+		// </IntraACL>
 	}
 
 	/**
diff --git a/includes/parser/Parser.php b/includes/parser/Parser.php
index bfba0fe74f..90ad6e3aa7 100644
--- a/includes/parser/Parser.php
+++ b/includes/parser/Parser.php
@@ -2197,7 +2197,19 @@ class Parser {
 			}
 
 			$unstrip = $this->mStripState->unstripNoWiki( $link );
+			// <IntraACL>
+			// Do not check permissions for links, except image links
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			$nt = is_string( $unstrip ) ? Title::newFromText( $unstrip ) : null;
+			$nt = Title::newFromText( $this->mStripState->unstripNoWiki( $link ) );
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 			if ( $nt === null ) {
 				$s .= $prefix . '[[' . $line;
 				continue;
@@ -2279,7 +2291,10 @@ class Parser {
 				}
 
 				if ( $ns == NS_FILE ) {
-					if ( !wfIsBadImage( $nt->getDBkey(), $this->mTitle ) ) {
+					// <IntraACL>
+					if ( !wfIsBadImage( $nt->getDBkey(), $this->mTitle ) &&
+						( $canRead = $nt->userCan( 'read' ) ) ) {
+					// </IntraACL>
 						if ( $wasblank ) {
 							# if no parameters were passed, $text
 							# becomes something like "File:Foo.png",
@@ -2296,6 +2311,13 @@ class Parser {
 						# cloak any absolute URLs inside the image markup, so replaceExternalLinks() won't touch them
 						$s .= $prefix . $this->armorLinks(
 							$this->makeImage( $nt, $text, $holders ) ) . $trail;
+					// <IntraACL>
+					} elseif ( !$canRead ) {
+						# Still register dependency on a nonreadable image
+						$time = $sha1 = $descQuery = false;
+						list( $file, $nt ) = $this->fetchFileAndTitle( $nt, $time, $sha1 );
+						$s .= $prefix . $trail;
+					// </IntraACL>
 					} else {
 						$s .= $prefix . $trail;
 					}
@@ -3586,7 +3608,18 @@ class Parser {
 				$part1 = $relative;
 				$ns = $this->mTitle->getNamespace();
 			}
+			// <IntraACL>
+			// Template access check is done below, after loading
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			$title = Title::newFromText( $part1, $ns );
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 			if ( $title ) {
 				$titleText = $title->getPrefixedText();
 				# Check for language variants if the template is not found
@@ -3646,11 +3679,25 @@ class Parser {
 					wfDebug( __METHOD__ . ": template inclusion denied for " .
 						$title->getPrefixedDBkey() . "\n" );
 				} else {
-					list( $text, $title ) = $this->getTemplateDom( $title );
+					list( $text, $title, $canRead ) = $this->getTemplateDom( $title );
 					if ( $text !== false ) {
 						$found = true;
 						$isChildObj = true;
 					}
+					// <IntraACL>
+					if ( $text !== false && !$canRead ) {
+						// Expand templates to always get correct templatelinks,
+						// even if current user has no access to some templates
+						global $haclgInclusionDeniedMessage;
+						$this->getPreprocessor()->newFrame()->expand( $text, 0 );
+						if ( $haclgInclusionDeniedMessage ) {
+							$text = wfMessage( $haclgInclusionDeniedMessage )->getText();
+						} elseif ( $haclgInclusionDeniedMessage === '' ) {
+							$text = '';
+						}
+						$isChildObj = false;
+					}
+					// </IntraACL>
 				}
 
 				# If the title is valid but undisplayable, make a link to it
@@ -3886,26 +3933,30 @@ class Parser {
 			$titleText = $title->getPrefixedDBkey();
 		}
 		if ( isset( $this->mTplDomCache[$titleText] ) ) {
-			return [ $this->mTplDomCache[$titleText], $title ];
+			$dom = $this->mTplDomCache[$titleText];
+			if ( !$dom ) {
+				return [ false, $title, true ];
+			}
+			return [ $dom[0], $title, $dom[1] ];
 		}
 
 		# Cache miss, go to the database
-		list( $text, $title ) = $this->fetchTemplateAndTitle( $title );
+		list( $text, $title, $canRead ) = $this->fetchTemplateAndTitle( $title );
 
 		if ( $text === false ) {
 			$this->mTplDomCache[$titleText] = false;
-			return [ false, $title ];
+			return [ false, $title, $canRead ];
 		}
 
 		$dom = $this->preprocessToDom( $text, self::PTD_FOR_INCLUSION );
-		$this->mTplDomCache[$titleText] = $dom;
+		$this->mTplDomCache[$titleText] = [ $dom, $canRead ];
 
 		if ( !$title->equals( $cacheTitle ) ) {
 			$this->mTplRedirCache[$cacheTitle->getPrefixedDBkey()] =
 				[ $title->getNamespace(), $cdb = $title->getDBkey() ];
 		}
 
-		return [ $dom, $title ];
+		return [ $dom, $title, $canRead ];
 	}
 
 	/**
@@ -3949,7 +4000,7 @@ class Parser {
 	/**
 	 * Fetch the unparsed text of a template and register a reference to it.
 	 * @param Title $title
-	 * @return array ( string or false, Title )
+	 * @return array ( string or false, Title, boolean )
 	 */
 	public function fetchTemplateAndTitle( $title ) {
 		// Defaults to Parser::statelessFetchTemplate()
@@ -3971,7 +4022,7 @@ class Parser {
 				}
 			}
 		}
-		return [ $text, $finalTitle ];
+		return [ $text, $finalTitle, $stuff['canRead'] ];
 	}
 
 	/**
@@ -3980,7 +4031,8 @@ class Parser {
 	 * @return string|bool
 	 */
 	public function fetchTemplate( $title ) {
-		return $this->fetchTemplateAndTitle( $title )[0];
+		$rv = $this->fetchTemplateAndTitle( $title );
+		return $rv[2] ? $rv[0] : '';
 	}
 
 	/**
@@ -3996,6 +4048,7 @@ class Parser {
 		$text = $skip = false;
 		$finalTitle = $title;
 		$deps = [];
+		$canRead = true;
 
 		# Loop to fetch the article, with up to 1 redirect
 		// @codingStandardsIgnoreStart Generic.CodeAnalysis.ForLoopWithTestFunctionCall.NotAllowed
@@ -4006,6 +4059,7 @@ class Parser {
 			Hooks::run( 'BeforeParserFetchTemplateAndtitle',
 				[ $parser, $title, &$skip, &$id ] );
 
+			$canRead = $canRead && $title->userCan( 'read' );
 			if ( $skip ) {
 				$text = false;
 				$deps[] = [
@@ -4015,6 +4069,11 @@ class Parser {
 				];
 				break;
 			}
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			# Get the revision
 			if ( $id ) {
 				$rev = Revision::newFromId( $id );
@@ -4024,6 +4083,11 @@ class Parser {
 				$rev = Revision::newFromTitle( $title );
 			}
 			$rev_id = $rev ? $rev->getId() : 0;
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 			# If there is no current revision, there is no page
 			if ( $id === false && !$rev ) {
 				$linkCache = LinkCache::singleton();
@@ -4067,9 +4131,20 @@ class Parser {
 			}
 			# Redirect?
 			$finalTitle = $title;
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				$etc = haclfDisableTitlePatch();
+			}
+			// </IntraACL>
 			$title = $content->getRedirectTarget();
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $etc );
+			}
+			// </IntraACL>
 		}
 		return [
+			'canRead' => $canRead,
 			'text' => $text,
 			'finalTitle' => $finalTitle,
 			'deps' => $deps ];
diff --git a/includes/parser/ParserCache.php b/includes/parser/ParserCache.php
index c6265a7ccd..f64764a8db 100644
--- a/includes/parser/ParserCache.php
+++ b/includes/parser/ParserCache.php
@@ -67,6 +67,9 @@ class ParserCache {
 		$pageid = $article->getId();
 		$renderkey = (int)( $wgRequest->getVal( 'action' ) == 'render' );
 
+		// Needed for IntraACL >= 2.03 to modify parser cache key for correct permissions
+		wfRunHooks( 'ParserOutputRenderKey', array( $article, &$renderkey ) );
+
 		$key = wfMemcKey( 'pcache', 'idhash', "{$pageid}-{$renderkey}!{$hash}" );
 		return $key;
 	}
diff --git a/includes/specialpage/QueryPage.php b/includes/specialpage/QueryPage.php
index 1beac43079..36fc920a4d 100644
--- a/includes/specialpage/QueryPage.php
+++ b/includes/specialpage/QueryPage.php
@@ -401,6 +401,12 @@ abstract class QueryPage extends SpecialPage {
 		if ( is_array( $query ) ) {
 			$tables = isset( $query['tables'] ) ? (array)$query['tables'] : [];
 			$fields = isset( $query['fields'] ) ? (array)$query['fields'] : [];
+			// <IntraACL>
+			if ( in_array( 'page', $tables ) && !isset( $fields['namespace'] ) ) {
+				$fields['namespace'] = 'page_namespace';
+				$fields['title'] = 'page_title';
+			}
+			// </IntraACL>
 			$conds = isset( $query['conds'] ) ? (array)$query['conds'] : [];
 			$options = isset( $query['options'] ) ? (array)$query['options'] : [];
 			$join_conds = isset( $query['join_conds'] ) ? (array)$query['join_conds'] : [];
@@ -679,6 +685,12 @@ abstract class QueryPage extends SpecialPage {
 			# $num [should update this to use a Pager]
 			// @codingStandardsIgnoreStart Generic.CodeAnalysis.ForLoopWithTestFunctionCall.NotAllowed
 			for ( $i = 0; $i < $num && $row = $res->fetchObject(); $i++ ) {
+// <IntraACL>
+                $title = Title::makeTitleSafe( $row->namespace, $row->title );
+                if ( !$title || !$title->userCan( 'read' ) ) {
+                    continue;
+                }
+// </IntraACL>
 				// @codingStandardsIgnoreEnd
 				$line = $this->formatResult( $skin, $row );
 				if ( $line ) {
diff --git a/includes/specials/SpecialAllPages.php b/includes/specials/SpecialAllPages.php
index b55f0b4923..5546d945c8 100644
--- a/includes/specials/SpecialAllPages.php
+++ b/includes/specials/SpecialAllPages.php
@@ -209,6 +209,11 @@ class SpecialAllPages extends IncludableSpecialPage {
 
 				while ( ( $n < $this->maxPerPage ) && ( $s = $res->fetchObject() ) ) {
 					$t = Title::newFromRow( $s );
+					// <IntraACL>
+					if ( $t && !$t->userCan( 'read' ) ) {
+						continue;
+					}
+					// </IntraACL>
 					if ( $t ) {
 						$out .= '<li' .
 							( $s->page_is_redirect ? ' class="allpagesredirect"' : '' ) .
diff --git a/includes/specials/SpecialAncientpages.php b/includes/specials/SpecialAncientpages.php
index 724435b04f..5498cfa161 100644
--- a/includes/specials/SpecialAncientpages.php
+++ b/includes/specials/SpecialAncientpages.php
@@ -41,7 +41,7 @@ class AncientPagesPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'page', 'revision' ],
 			'fields' => [
 				'namespace' => 'page_namespace',
@@ -54,6 +54,10 @@ class AncientPagesPage extends QueryPage {
 				'page_latest=rev_id'
 			]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	public function usesTimestamps() {
diff --git a/includes/specials/SpecialBrokenRedirects.php b/includes/specials/SpecialBrokenRedirects.php
index 4c3fbe5b18..7340ac2c2e 100644
--- a/includes/specials/SpecialBrokenRedirects.php
+++ b/includes/specials/SpecialBrokenRedirects.php
@@ -51,7 +51,7 @@ class BrokenRedirectsPage extends QueryPage {
 	public function getQueryInfo() {
 		$dbr = wfGetDB( DB_SLAVE );
 
-		return [
+		$query = [
 			'tables' => [
 				'redirect',
 				'p1' => 'page',
@@ -82,6 +82,10 @@ class BrokenRedirectsPage extends QueryPage {
 				] ],
 			],
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'p1', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialDeadendpages.php b/includes/specials/SpecialDeadendpages.php
index f13f231dc4..8f9b72b52a 100644
--- a/includes/specials/SpecialDeadendpages.php
+++ b/includes/specials/SpecialDeadendpages.php
@@ -57,7 +57,7 @@ class DeadendPagesPage extends PageQueryPage {
 	}
 
 	function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'page', 'pagelinks' ],
 			'fields' => [
 				'namespace' => 'page_namespace',
@@ -76,6 +76,10 @@ class DeadendPagesPage extends PageQueryPage {
 				]
 			]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
diff --git a/includes/specials/SpecialDoubleRedirects.php b/includes/specials/SpecialDoubleRedirects.php
index 7b00064997..16961562a4 100644
--- a/includes/specials/SpecialDoubleRedirects.php
+++ b/includes/specials/SpecialDoubleRedirects.php
@@ -96,6 +96,10 @@ class DoubleRedirectsPage extends QueryPage {
 			$retval['conds']['pa.page_title'] = $title;
 		}
 
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$retval, 'pa', NULL, NULL ) );
+		// </IntraACL>
+
 		return $retval;
 	}
 
diff --git a/includes/specials/SpecialEditTags.php b/includes/specials/SpecialEditTags.php
index 252d07670e..1d71c1cfc2 100644
--- a/includes/specials/SpecialEditTags.php
+++ b/includes/specials/SpecialEditTags.php
@@ -98,6 +98,11 @@ class SpecialEditTags extends UnlistedSpecialPage {
 
 		$this->typeName = $request->getVal( 'type' );
 		$this->targetObj = Title::newFromText( $request->getText( 'target' ) );
+		// <IntraACL>
+		if ( !$this->targetObj->userCan( 'read' ) ) {
+			throw new ErrorPageError( 'permission-denied', 'permission-denied' );
+		}
+		// </IntraACL>
 
 		// sanity check of parameter
 		switch ( $this->typeName ) {
diff --git a/includes/specials/SpecialFewestrevisions.php b/includes/specials/SpecialFewestrevisions.php
index b86a95e8aa..f66de8e5eb 100644
--- a/includes/specials/SpecialFewestrevisions.php
+++ b/includes/specials/SpecialFewestrevisions.php
@@ -41,7 +41,7 @@ class FewestrevisionsPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'revision', 'page' ],
 			'fields' => [
 				'namespace' => 'page_namespace',
@@ -62,6 +62,10 @@ class FewestrevisionsPage extends QueryPage {
 				'GROUP BY' => [ 'page_namespace', 'page_title', 'page_is_redirect' ]
 			]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=tl_title', 'page_namespace=tl_namespace' ), NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function sortDescending() {
diff --git a/includes/specials/SpecialListfiles.php b/includes/specials/SpecialListfiles.php
index e6e1048cd6..bfe1a2b17d 100644
--- a/includes/specials/SpecialListfiles.php
+++ b/includes/specials/SpecialListfiles.php
@@ -59,6 +59,18 @@ class SpecialListFiles extends IncludableSpecialPage {
 		}
 	}
 
+	function formatRow( $row ) {
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$filePage = Title::makeTitleSafe( NS_FILE, $row->img_name );
+			if ( $filePage && !$filePage->userCan('read') ) {
+				return '';
+			}
+		}
+		// </IntraACL>
+		return parent::formatRow( $row );
+	}
+
 	/**
 	 * Return an array of subpages beginning with $search that this special page will accept.
 	 *
diff --git a/includes/specials/SpecialListredirects.php b/includes/specials/SpecialListredirects.php
index ace6d02cb2..dd7a523049 100644
--- a/includes/specials/SpecialListredirects.php
+++ b/includes/specials/SpecialListredirects.php
@@ -46,7 +46,7 @@ class ListredirectsPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'p1' => 'page', 'redirect', 'p2' => 'page' ],
 			'fields' => [ 'namespace' => 'p1.page_namespace',
 				'title' => 'p1.page_title',
@@ -63,6 +63,10 @@ class ListredirectsPage extends QueryPage {
 					'p2.page_namespace=rd_namespace',
 					'p2.page_title=rd_title' ] ] ]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'p1', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
@@ -123,6 +127,11 @@ class ListredirectsPage extends QueryPage {
 		# Find out where the redirect leads
 		$target = $this->getRedirectTarget( $result );
 		if ( $target ) {
+			// <IntraACL>
+			if ( !$target->userCan( 'read' ) ) {
+				return '';
+			}
+			// </IntraACL>
 			# Make a link to the destination page
 			$lang = $this->getLanguage();
 			$arr = $lang->getArrow() . $lang->getDirMark();
diff --git a/includes/specials/SpecialLonelypages.php b/includes/specials/SpecialLonelypages.php
index ff76a4b47d..8bd3afc1a2 100644
--- a/includes/specials/SpecialLonelypages.php
+++ b/includes/specials/SpecialLonelypages.php
@@ -74,7 +74,7 @@ class LonelyPagesPage extends PageQueryPage {
 		// Allow extensions to modify the query
 		Hooks::run( 'LonelyPagesQuery', [ &$tables, &$conds, &$joinConds ] );
 
-		return [
+		$query = [
 			'tables' => $tables,
 			'fields' => [
 				'namespace' => 'page_namespace',
@@ -84,6 +84,10 @@ class LonelyPagesPage extends PageQueryPage {
 			'conds' => $conds,
 			'join_conds' => $joinConds
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
diff --git a/includes/specials/SpecialMostcategories.php b/includes/specials/SpecialMostcategories.php
index 06d21d568a..ebe09e1cc9 100644
--- a/includes/specials/SpecialMostcategories.php
+++ b/includes/specials/SpecialMostcategories.php
@@ -43,7 +43,7 @@ class MostcategoriesPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'categorylinks', 'page' ],
 			'fields' => [
 				'namespace' => 'page_namespace',
@@ -62,6 +62,10 @@ class MostcategoriesPage extends QueryPage {
 				]
 			]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialMostimages.php b/includes/specials/SpecialMostimages.php
index 1339f4bcbb..e9d019e1b7 100644
--- a/includes/specials/SpecialMostimages.php
+++ b/includes/specials/SpecialMostimages.php
@@ -43,7 +43,7 @@ class MostimagesPage extends ImageQueryPage {
 	}
 
 	function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'imagelinks' ],
 			'fields' => [
 				'namespace' => NS_FILE,
@@ -55,6 +55,10 @@ class MostimagesPage extends ImageQueryPage {
 				'HAVING' => 'COUNT(*) > 1'
 			]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=il_to' ), NS_FILE ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getCellHtml( $row ) {
diff --git a/includes/specials/SpecialMostinterwikis.php b/includes/specials/SpecialMostinterwikis.php
index 8271d165b6..3bc1e4e14f 100644
--- a/includes/specials/SpecialMostinterwikis.php
+++ b/includes/specials/SpecialMostinterwikis.php
@@ -43,7 +43,7 @@ class MostinterwikisPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [
 				'langlinks',
 				'page'
@@ -66,6 +66,10 @@ class MostinterwikisPage extends QueryPage {
 				]
 			]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
@@ -98,7 +102,9 @@ class MostinterwikisPage extends QueryPage {
 	 */
 	function formatResult( $skin, $result ) {
 		$title = Title::makeTitleSafe( $result->namespace, $result->title );
-		if ( !$title ) {
+		// <IntraACL>
+		if ( !$title || !$title->userCan( 'read' ) ) {
+		// </IntraACL>
 			return Html::element(
 				'span',
 				[ 'class' => 'mw-invalidtitle' ],
diff --git a/includes/specials/SpecialMostlinked.php b/includes/specials/SpecialMostlinked.php
index 3663647129..151b5b46e7 100644
--- a/includes/specials/SpecialMostlinked.php
+++ b/includes/specials/SpecialMostlinked.php
@@ -44,7 +44,7 @@ class MostlinkedPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'pagelinks', 'page' ],
 			'fields' => [
 				'namespace' => 'pl_namespace',
@@ -69,6 +69,10 @@ class MostlinkedPage extends QueryPage {
 				]
 			]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialMostlinkedcategories.php b/includes/specials/SpecialMostlinkedcategories.php
index b8316f3eb0..6a8228381a 100644
--- a/includes/specials/SpecialMostlinkedcategories.php
+++ b/includes/specials/SpecialMostlinkedcategories.php
@@ -39,13 +39,17 @@ class MostlinkedCategoriesPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'category' ],
 			'fields' => [ 'title' => 'cat_title',
 				'namespace' => NS_CATEGORY,
 				'value' => 'cat_pages' ],
 			'conds' => [ 'cat_pages > 0' ],
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=cat_title' ), NS_CATEGORY ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function sortDescending() {
diff --git a/includes/specials/SpecialMostlinkedtemplates.php b/includes/specials/SpecialMostlinkedtemplates.php
index 950241f4fb..6ba2707b70 100644
--- a/includes/specials/SpecialMostlinkedtemplates.php
+++ b/includes/specials/SpecialMostlinkedtemplates.php
@@ -61,7 +61,7 @@ class MostlinkedTemplatesPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'templatelinks' ],
 			'fields' => [
 				'namespace' => 'tl_namespace',
@@ -70,6 +70,10 @@ class MostlinkedTemplatesPage extends QueryPage {
 			],
 			'options' => [ 'GROUP BY' => [ 'tl_namespace', 'tl_title' ] ]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_namespace=tl_namespace', 'page_title=tl_title' ), NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialNewpages.php b/includes/specials/SpecialNewpages.php
index c24b054750..a8bbbda546 100644
--- a/includes/specials/SpecialNewpages.php
+++ b/includes/specials/SpecialNewpages.php
@@ -304,6 +304,12 @@ class SpecialNewpages extends IncludableSpecialPage {
 		$lang = $this->getLanguage();
 		$dm = $lang->getDirMark();
 
+		// <IntraACL>
+		if ( !$title->userCan( 'read' ) ) {
+			return '';
+		}
+		// </IntraACL>
+
 		$spanTime = Html::element( 'span', [ 'class' => 'mw-newpages-time' ],
 			$lang->userTimeAndDate( $result->rc_timestamp, $this->getUser() )
 		);
diff --git a/includes/specials/SpecialPageLanguage.php b/includes/specials/SpecialPageLanguage.php
index 0035829527..0a5eb30f51 100644
--- a/includes/specials/SpecialPageLanguage.php
+++ b/includes/specials/SpecialPageLanguage.php
@@ -117,9 +117,11 @@ class SpecialPageLanguage extends FormSpecialPage {
 		$title = Title::newFromText( $data['pagename'] );
 
 		// Check if title is valid
-		if ( !$title ) {
+		// <IntraACL>
+		if ( !$title || !$title->userCan( 'edit' ) ) {
 			return false;
 		}
+		// </IntraACL>
 
 		// Get the default language for the wiki
 		$defLang = $this->getConfig()->get( 'LanguageCode' );
diff --git a/includes/specials/SpecialPagesWithProp.php b/includes/specials/SpecialPagesWithProp.php
index 327ddda414..967a019bae 100644
--- a/includes/specials/SpecialPagesWithProp.php
+++ b/includes/specials/SpecialPagesWithProp.php
@@ -101,7 +101,7 @@ class SpecialPagesWithProp extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'page_props', 'page' ],
 			'fields' => [
 				'page_id' => 'pp_page',
@@ -120,6 +120,10 @@ class SpecialPagesWithProp extends QueryPage {
 			],
 			'options' => []
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
diff --git a/includes/specials/SpecialPrefixindex.php b/includes/specials/SpecialPrefixindex.php
index 9891f86002..61ce7d29ed 100644
--- a/includes/specials/SpecialPrefixindex.php
+++ b/includes/specials/SpecialPrefixindex.php
@@ -211,6 +211,11 @@ class SpecialPrefixindex extends SpecialAllPages {
 				while ( ( $n < $this->maxPerPage ) && ( $s = $res->fetchObject() ) ) {
 					$t = Title::makeTitle( $s->page_namespace, $s->page_title );
 					if ( $t ) {
+						// <IntraACL>
+						if ( !$t->userCan( 'read' ) ) {
+							continue;
+						}
+						// </IntraACL>
 						$displayed = $t->getText();
 						// Try not to generate unclickable links
 						if ( $this->stripPrefix && $prefixLength !== strlen( $displayed ) ) {
diff --git a/includes/specials/SpecialProtectedpages.php b/includes/specials/SpecialProtectedpages.php
index 54b471e40b..5b5f9a17a4 100644
--- a/includes/specials/SpecialProtectedpages.php
+++ b/includes/specials/SpecialProtectedpages.php
@@ -517,7 +517,7 @@ class ProtectedPagesPager extends TablePager {
 			$conds[] = 'page_namespace=' . $this->mDb->addQuotes( $this->namespace );
 		}
 
-		return [
+		$query = [
 			'tables' => [ 'page', 'page_restrictions', 'log_search', 'logging' ],
 			'fields' => [
 				'pr_id',
@@ -547,6 +547,10 @@ class ProtectedPagesPager extends TablePager {
 				]
 			]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	protected function getTableClass() {
diff --git a/includes/specials/SpecialRandomInCategory.php b/includes/specials/SpecialRandomInCategory.php
index efb1748913..762f3e82fd 100644
--- a/includes/specials/SpecialRandomInCategory.php
+++ b/includes/specials/SpecialRandomInCategory.php
@@ -147,6 +147,8 @@ class SpecialRandomInCategory extends FormSpecialPage {
 	 * @return Title|null Title object (or null if nothing to choose from)
 	 */
 	public function getRandomTitle() {
+		$try = 0;
+retry:
 		// Convert to float, since we do math with the random number.
 		$rand = (float)wfRandom();
 		$title = null;
@@ -179,7 +181,17 @@ class SpecialRandomInCategory extends FormSpecialPage {
 		}
 
 		if ( $row ) {
-			return Title::makeTitle( $row->page_namespace, $row->page_title );
+			$title = Title::makeTitle( $row->page_namespace, $row->page_title );
+			// <IntraACL>
+			if ( !$title->userCan( 'read' ) ) {
+				if ( $try < 10 ) {
+					$try++;
+					goto retry;
+				}
+				return null;
+			}
+			// </IntraACL>
+			return $title;
 		}
 
 		return null;
diff --git a/includes/specials/SpecialRandompage.php b/includes/specials/SpecialRandompage.php
index d7835d1045..2d062cf579 100644
--- a/includes/specials/SpecialRandompage.php
+++ b/includes/specials/SpecialRandompage.php
@@ -73,6 +73,15 @@ class RandomPage extends SpecialPage {
 			return;
 		}
 
+		// <IntraACL>
+		// Do not redirect to non-readable pages, just print permission errors in that case
+		global $wgUser;
+		$permErrors = $title->getUserPermissionsErrors( 'read', $wgUser );
+		if ( count( $permErrors ) ) {
+			throw new PermissionsError( 'read', $permErrors );
+		}
+		// </IntraACL>
+
 		$redirectParam = $this->isRedirect() ? [ 'redirect' => 'no' ] : [];
 		$query = array_merge( $this->getRequest()->getValues(), $redirectParam );
 		unset( $query['title'] );
diff --git a/includes/specials/SpecialRecentchanges.php b/includes/specials/SpecialRecentchanges.php
index b93fb4e2af..6b67cd838c 100644
--- a/includes/specials/SpecialRecentchanges.php
+++ b/includes/specials/SpecialRecentchanges.php
@@ -331,6 +331,11 @@ class SpecialRecentChanges extends ChangesListSpecialPage {
 				break;
 			}
 			$rc = RecentChange::newFromRow( $obj );
+			// <IntraACL>
+			if ( !$rc->getTitle()->userCan( 'read' ) ) {
+				continue;
+			}
+			// </IntraACL>
 
 			# Skip CatWatch entries for hidden cats based on user preference
 			if (
diff --git a/includes/specials/SpecialRedirect.php b/includes/specials/SpecialRedirect.php
index 80dc7977a1..7472c36f74 100644
--- a/includes/specials/SpecialRedirect.php
+++ b/includes/specials/SpecialRedirect.php
@@ -78,7 +78,11 @@ class SpecialRedirect extends FormSpecialPage {
 			return null;
 		}
 		$userpage = Title::makeTitle( NS_USER, $username );
-
+		// <IntraACL>
+		if ( !$userpage->userCan( 'read' ) ) {
+			return null;
+		}
+		// </IntraACL>
 		return $userpage->getFullURL( '', false, PROTO_CURRENT );
 	}
 
@@ -90,7 +94,9 @@ class SpecialRedirect extends FormSpecialPage {
 	function dispatchFile() {
 		$title = Title::makeTitleSafe( NS_FILE, $this->mValue );
 
-		if ( !$title instanceof Title ) {
+		// <IntraACL>
+		if ( !$title instanceof Title || $title->getNamespace() != NS_FILE || !$title->userCan( 'read' ) ) {
+		// </IntraACL>
 			return null;
 		}
 		$file = wfFindFile( $title );
diff --git a/includes/specials/SpecialSearch.php b/includes/specials/SpecialSearch.php
index 9ba948c9e9..c940d1f7aa 100644
--- a/includes/specials/SpecialSearch.php
+++ b/includes/specials/SpecialSearch.php
@@ -716,7 +716,11 @@ class SpecialSearch extends SpecialPage {
 
 		$out .= "<ul class='mw-search-results'>\n";
 		while ( $result ) {
-			$out .= $this->showHit( $result, $terms, ++$pos );
+			// <IntraACL>
+			if ( $result->getTitle() && $result->getTitle()->userCan( 'read' ) ) {
+				$out .= $this->showHit( $result, $terms, ++$pos );
+			}
+			// </IntraACL>
 			$result = $matches->next();
 		}
 		$out .= "</ul>\n";
diff --git a/includes/specials/SpecialShortpages.php b/includes/specials/SpecialShortpages.php
index 20f2fc8369..b65401c4b2 100644
--- a/includes/specials/SpecialShortpages.php
+++ b/includes/specials/SpecialShortpages.php
@@ -49,7 +49,7 @@ class ShortPagesPage extends QueryPage {
 		// Allow extensions to modify the query
 		Hooks::run( 'ShortPagesQuery', [ &$tables, &$conds, &$joinConds, &$options ] );
 
-		return [
+		$query = [
 			'tables' => $tables,
 			'fields' => [
 				'namespace' => 'page_namespace',
@@ -60,6 +60,10 @@ class ShortPagesPage extends QueryPage {
 			'join_conds' => $joinConds,
 			'options' => $options
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
diff --git a/includes/specials/SpecialSpecialpages.php b/includes/specials/SpecialSpecialpages.php
index 688a6efb52..db3de3e2a5 100644
--- a/includes/specials/SpecialSpecialpages.php
+++ b/includes/specials/SpecialSpecialpages.php
@@ -61,7 +61,9 @@ class SpecialSpecialpages extends UnlistedSpecialPage {
 		$groups = [];
 		/** @var SpecialPage $page */
 		foreach ( $pages as $page ) {
-			if ( $page->isListed() ) {
+			// <IntraACL>
+			if ( $page->isListed() && $page->getTitle()->userCan( 'read' ) ) {
+			// </IntraACL>
 				$group = $page->getFinalGroupName();
 				if ( !isset( $groups[$group] ) ) {
 					$groups[$group] = [];
diff --git a/includes/specials/SpecialUncategorizedimages.php b/includes/specials/SpecialUncategorizedimages.php
index 1cb27a3fc6..59ff883465 100644
--- a/includes/specials/SpecialUncategorizedimages.php
+++ b/includes/specials/SpecialUncategorizedimages.php
@@ -46,7 +46,7 @@ class UncategorizedImagesPage extends ImageQueryPage {
 	}
 
 	function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'page', 'categorylinks' ],
 			'fields' => [ 'namespace' => 'page_namespace',
 				'title' => 'page_title',
@@ -57,6 +57,10 @@ class UncategorizedImagesPage extends ImageQueryPage {
 			'join_conds' => [ 'categorylinks' => [
 				'LEFT JOIN', 'cl_from=page_id' ] ]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	protected function getGroupName() {
diff --git a/includes/specials/SpecialUncategorizedpages.php b/includes/specials/SpecialUncategorizedpages.php
index 30b33cc697..9270ca9a76 100644
--- a/includes/specials/SpecialUncategorizedpages.php
+++ b/includes/specials/SpecialUncategorizedpages.php
@@ -47,7 +47,7 @@ class UncategorizedPagesPage extends PageQueryPage {
 	}
 
 	function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'page', 'categorylinks' ],
 			'fields' => [
 				'namespace' => 'page_namespace',
@@ -67,6 +67,10 @@ class UncategorizedPagesPage extends PageQueryPage {
 				'categorylinks' => [ 'LEFT JOIN', 'cl_from = page_id' ]
 			]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function getOrderFields() {
diff --git a/includes/specials/SpecialUnusedcategories.php b/includes/specials/SpecialUnusedcategories.php
index 45efaf3f13..b1c1ebbbfd 100644
--- a/includes/specials/SpecialUnusedcategories.php
+++ b/includes/specials/SpecialUnusedcategories.php
@@ -38,7 +38,7 @@ class UnusedCategoriesPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'page', 'categorylinks' ],
 			'fields' => [
 				'namespace' => 'page_namespace',
@@ -52,6 +52,10 @@ class UnusedCategoriesPage extends QueryPage {
 			],
 			'join_conds' => [ 'categorylinks' => [ 'LEFT JOIN', 'cl_to = page_title' ] ]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialUnusedimages.php b/includes/specials/SpecialUnusedimages.php
index 2cc1a7b0e8..25cd0dbc7a 100644
--- a/includes/specials/SpecialUnusedimages.php
+++ b/includes/specials/SpecialUnusedimages.php
@@ -70,6 +70,10 @@ class UnusedimagesPage extends ImageQueryPage {
 				'LEFT JOIN', 'il_to = page_title' ];
 		}
 
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$retval, 'page', array( 'page_title=img_name' ), NS_FILE ) );
+		// </IntraACL>
+
 		return $retval;
 	}
 
diff --git a/includes/specials/SpecialUnusedtemplates.php b/includes/specials/SpecialUnusedtemplates.php
index b0a2579fe0..1b6afc137a 100644
--- a/includes/specials/SpecialUnusedtemplates.php
+++ b/includes/specials/SpecialUnusedtemplates.php
@@ -47,7 +47,7 @@ class UnusedtemplatesPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'page', 'templatelinks' ],
 			'fields' => [
 				'namespace' => 'page_namespace',
@@ -63,6 +63,10 @@ class UnusedtemplatesPage extends QueryPage {
 				'LEFT JOIN', [ 'tl_title = page_title',
 					'tl_namespace = page_namespace' ] ] ]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	/**
diff --git a/includes/specials/SpecialUnwatchedpages.php b/includes/specials/SpecialUnwatchedpages.php
index df57744b3a..cd1debd691 100644
--- a/includes/specials/SpecialUnwatchedpages.php
+++ b/includes/specials/SpecialUnwatchedpages.php
@@ -44,7 +44,7 @@ class UnwatchedpagesPage extends QueryPage {
 	}
 
 	public function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'page', 'watchlist' ],
 			'fields' => [
 				'namespace' => 'page_namespace',
@@ -60,6 +60,10 @@ class UnwatchedpagesPage extends QueryPage {
 				'LEFT JOIN', [ 'wl_title = page_title',
 					'wl_namespace = page_namespace' ] ] ]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function sortDescending() {
diff --git a/includes/specials/SpecialUpload.php b/includes/specials/SpecialUpload.php
index 449af52f75..02998aaa54 100644
--- a/includes/specials/SpecialUpload.php
+++ b/includes/specials/SpecialUpload.php
@@ -356,6 +356,8 @@ class SpecialUpload extends SpecialPage {
 	 *   warnings and it should continue processing
 	 */
 	protected function showUploadWarning( $warnings ) {
+		wfRunHooks( 'SpecialUploadCheckWarnings', array( $this, &$warnings ) );
+
 		# If there are no warnings, or warnings we can ignore, return early.
 		# mDestWarningAck is set when some javascript has shown the warning
 		# to the user. mForReUpload is set when the user clicks the "upload a
diff --git a/includes/specials/SpecialWantedcategories.php b/includes/specials/SpecialWantedcategories.php
index 9bf44adffd..9cf4a86d7b 100644
--- a/includes/specials/SpecialWantedcategories.php
+++ b/includes/specials/SpecialWantedcategories.php
@@ -36,7 +36,7 @@ class WantedCategoriesPage extends WantedQueryPage {
 	}
 
 	function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'categorylinks', 'page' ],
 			'fields' => [
 				'namespace' => NS_CATEGORY,
@@ -49,6 +49,10 @@ class WantedCategoriesPage extends WantedQueryPage {
 				[ 'page_title = cl_to',
 					'page_namespace' => NS_CATEGORY ] ] ]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	function preprocessResults( $db, $res ) {
diff --git a/includes/specials/SpecialWantedfiles.php b/includes/specials/SpecialWantedfiles.php
index 74d5e5d346..46261e4134 100644
--- a/includes/specials/SpecialWantedfiles.php
+++ b/includes/specials/SpecialWantedfiles.php
@@ -106,7 +106,7 @@ class WantedFilesPage extends WantedQueryPage {
 	}
 
 	function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [
 				'imagelinks',
 				'page',
@@ -143,6 +143,10 @@ class WantedFilesPage extends WantedQueryPage {
 				]
 			]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=img_name' ), NS_FILE ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	protected function getGroupName() {
diff --git a/includes/specials/SpecialWantedpages.php b/includes/specials/SpecialWantedpages.php
index 1956c9d166..f3e9b507a7 100644
--- a/includes/specials/SpecialWantedpages.php
+++ b/includes/specials/SpecialWantedpages.php
@@ -87,6 +87,9 @@ class WantedPagesPage extends WantedQueryPage {
 		// Avoid PHP 7.1 warning from passing $this by reference
 		$wantedPages = $this;
 		Hooks::run( 'WantedPages::getQueryInfo', [ &$wantedPages, &$query ] );
+		// <IntraACL>
+		Hooks::run( 'FilterPageQuery', array( &$query, 'pg1', NULL, NULL ) );
+		// </IntraACL>
 
 		return $query;
 	}
diff --git a/includes/specials/SpecialWantedtemplates.php b/includes/specials/SpecialWantedtemplates.php
index 66e681420f..7ad15d9992 100644
--- a/includes/specials/SpecialWantedtemplates.php
+++ b/includes/specials/SpecialWantedtemplates.php
@@ -37,7 +37,7 @@ class WantedTemplatesPage extends WantedQueryPage {
 	}
 
 	function getQueryInfo() {
-		return [
+		$query = [
 			'tables' => [ 'templatelinks', 'page' ],
 			'fields' => [
 				'namespace' => 'tl_namespace',
@@ -53,6 +53,10 @@ class WantedTemplatesPage extends WantedQueryPage {
 				[ 'page_namespace = tl_namespace',
 					'page_title = tl_title' ] ] ]
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
+		return $query;
 	}
 
 	protected function getGroupName() {
diff --git a/includes/specials/SpecialWatchlist.php b/includes/specials/SpecialWatchlist.php
index fcc0c91007..7724236894 100644
--- a/includes/specials/SpecialWatchlist.php
+++ b/includes/specials/SpecialWatchlist.php
@@ -375,6 +375,11 @@ class SpecialWatchlist extends ChangesListSpecialPage {
 		foreach ( $rows as $obj ) {
 			# Make RC entry
 			$rc = RecentChange::newFromRow( $obj );
+			// <IntraACL>
+			if ( !$rc->getTitle()->userCan( 'read' ) ) {
+				continue;
+			}
+			// </IntraACL>
 
 			# Skip CatWatch entries for hidden cats based on user preference
 			if (
diff --git a/includes/specials/SpecialWhatlinkshere.php b/includes/specials/SpecialWhatlinkshere.php
index baa55f098a..a0c04e9ea6 100644
--- a/includes/specials/SpecialWhatlinkshere.php
+++ b/includes/specials/SpecialWhatlinkshere.php
@@ -280,7 +280,11 @@ class SpecialWhatLinksHere extends IncludableSpecialPage {
 		$out->addHTML( $this->listStart( $level ) );
 		foreach ( $rows as $row ) {
 			$nt = Title::makeTitle( $row->page_namespace, $row->page_title );
-
+			// <IntraACL>
+			if ( !$nt->userCan( 'read' ) ) {
+				continue;
+			}
+			// </IntraACL>
 			if ( $row->rd_from && $level < 2 ) {
 				$out->addHTML( $this->listItem( $row, $nt, $target, true ) );
 				$this->showIndirectLinks(
diff --git a/includes/specials/SpecialWithoutinterwiki.php b/includes/specials/SpecialWithoutinterwiki.php
index cca54b3589..cebe0dafc4 100644
--- a/includes/specials/SpecialWithoutinterwiki.php
+++ b/includes/specials/SpecialWithoutinterwiki.php
@@ -100,7 +100,9 @@ class WithoutInterwikiPage extends PageQueryPage {
 			$dbr = wfGetDB( DB_SLAVE );
 			$query['conds'][] = 'page_title ' . $dbr->buildLike( $this->prefix, $dbr->anyString() );
 		}
-
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', NULL, NULL ) );
+		// </IntraACL>
 		return $query;
 	}
 
diff --git a/includes/specials/helpers/LoginHelper.php b/includes/specials/helpers/LoginHelper.php
index cfcbf652c0..49db405cbb 100644
--- a/includes/specials/helpers/LoginHelper.php
+++ b/includes/specials/helpers/LoginHelper.php
@@ -75,7 +75,12 @@ class LoginHelper extends ContextSource {
 		// Allow modification of redirect behavior
 		Hooks::run( 'PostLoginRedirect', [ &$returnTo, &$returnToQuery, &$type ] );
 
-		$returnToTitle = Title::newFromText( $returnTo ) ?:  Title::newMainPage();
+		$returnToTitle = Title::newFromText( $returnTo );
+		// <IntraACL>
+		if ( !$returnToTitle || !$returnToTitle->userCan( 'read' ) ) {
+			$returnToTitle = Title::newMainPage();
+		}
+		// </IntraACL>
 
 		if ( $wgSecureLogin && !$stickHTTPS ) {
 			$options = [ 'http' ];
diff --git a/includes/specials/pagers/CategoryPager.php b/includes/specials/pagers/CategoryPager.php
index cba4952b6f..73131b4700 100644
--- a/includes/specials/pagers/CategoryPager.php
+++ b/includes/specials/pagers/CategoryPager.php
@@ -48,12 +48,16 @@ class CategoryPager extends AlphabeticPager {
 	}
 
 	function getQueryInfo() {
-		return [
+		$info = [
 			'tables' => [ 'category' ],
 			'fields' => [ 'cat_title', 'cat_pages' ],
 			'conds' => [ 'cat_pages > 0' ],
-			'options' => [ 'USE INDEX' => 'cat_title' ],
+			'options' => [ 'USE INDEX' => [ 'category' => 'cat_title' ] ],
 		];
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$info, 'page', array( 'page_title=cat_title' ), NS_CATEGORY ) );
+		// </IntraACL>
+		return $info;
 	}
 
 	function getIndexField() {
diff --git a/includes/specials/pagers/ImageListPager.php b/includes/specials/pagers/ImageListPager.php
index 40706faaa0..74f534d3e0 100644
--- a/includes/specials/pagers/ImageListPager.php
+++ b/includes/specials/pagers/ImageListPager.php
@@ -221,6 +221,11 @@ class ImageListPager extends TablePager {
 		// for two different tables, without reimplementing
 		// the pager class.
 		$qi = $this->getQueryInfoReal( $this->mTableName );
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', [ &$qi, 'page', [
+			$this->mTableName === 'oldimage' ? 'page_title=oi_name' : 'page_title=img_name'
+		], NS_FILE ] );
+		// </IntraACL>
 
 		return $qi;
 	}
diff --git a/includes/specials/pagers/NewFilesPager.php b/includes/specials/pagers/NewFilesPager.php
index ae5773617c..0050ec402a 100644
--- a/includes/specials/pagers/NewFilesPager.php
+++ b/includes/specials/pagers/NewFilesPager.php
@@ -113,6 +113,10 @@ class NewFilesPager extends ReverseChronologicalPager {
 			'options' => $options,
 		];
 
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$query, 'page', array( 'page_title=img_name' ), NS_FILE ) );
+		// </IntraACL>
+
 		return $query;
 	}
 
diff --git a/includes/specials/pagers/NewPagesPager.php b/includes/specials/pagers/NewPagesPager.php
index 46297b4cf2..29d03a99e0 100644
--- a/includes/specials/pagers/NewPagesPager.php
+++ b/includes/specials/pagers/NewPagesPager.php
@@ -120,6 +120,10 @@ class NewPagesPager extends ReverseChronologicalPager {
 			$this->opts['tagfilter']
 		);
 
+		// <IntraACL>
+		wfRunHooks( 'FilterPageQuery', array( &$info, 'page', NULL, NULL ) );
+		// </IntraACL>
+
 		return $info;
 	}
 
diff --git a/includes/upload/UploadBase.php b/includes/upload/UploadBase.php
index 3994755f32..4590d08d20 100644
--- a/includes/upload/UploadBase.php
+++ b/includes/upload/UploadBase.php
@@ -718,6 +718,14 @@ abstract class UploadBase {
 	public function performUpload( $comment, $pageText, $watch, $user, $tags = [] ) {
 		$this->getLocalFile()->load( File::READ_LATEST );
 
+		// <IntraACL>
+		$status = NULL;
+		Hooks::run( 'PerformUpload', array( $this, $comment, $pageText, $watch, $user, &$status ) );
+		if ( $status ) {
+			return $status;
+		}
+		// </IntraACL>
+
 		$status = $this->getLocalFile()->upload(
 			$this->mTempPath,
 			$comment,
diff --git a/includes/user/User.php b/includes/user/User.php
index 9b956b4ed5..74d9897b8f 100644
--- a/includes/user/User.php
+++ b/includes/user/User.php
@@ -393,7 +393,13 @@ class User implements IDBAccessObject {
 					$this->queryFlagsUsed = $flags;
 				}
 
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					$hacl = haclfDisableTitlePatch();
+				}
 				$this->mId = self::idFromName( $this->mName, $flags );
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					haclfRestoreTitlePatch( $hacl );
+				}
 				if ( !$this->mId ) {
 					// Nonexistent user placeholder object
 					$this->loadDefaults( $this->mName );
@@ -846,12 +852,21 @@ class User implements IDBAccessObject {
 	public static function isValidUserName( $name ) {
 		global $wgContLang, $wgMaxNameChars;
 
+		# Disable IntraACL title check as the main and/or
+		# user namespaces may be protected
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$hacl = haclfDisableTitlePatch();
+		}
+
 		if ( $name == ''
 			|| User::isIP( $name )
 			|| strpos( $name, '/' ) !== false
 			|| strlen( $name ) > $wgMaxNameChars
 			|| $name != $wgContLang->ucfirst( $name )
 		) {
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
 
@@ -861,6 +876,9 @@ class User implements IDBAccessObject {
 		if ( is_null( $parsed )
 			|| $parsed->getNamespace()
 			|| strcmp( $name, $parsed->getPrefixedText() ) ) {
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
 
@@ -875,9 +893,15 @@ class User implements IDBAccessObject {
 			'\x{e000}-\x{f8ff}' . # private use
 			']/u';
 		if ( preg_match( $unicodeBlacklist, $name ) ) {
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
 			return false;
 		}
 
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $hacl );
+		}
 		return true;
 	}
 
@@ -1048,6 +1072,14 @@ class User implements IDBAccessObject {
 	 * @return bool|string
 	 */
 	public static function getCanonicalName( $name, $validate = 'valid' ) {
+		// <IntraACL>
+		# Disable IntraACL title check as the main and/or
+		# user namespaces may be protected
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$hacl = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
+
 		// Force usernames to capital
 		global $wgContLang;
 		$name = $wgContLang->ucfirst( $name );
@@ -1056,6 +1088,11 @@ class User implements IDBAccessObject {
 		# with title normalisation, but then it's too late to
 		# check elsewhere
 		if ( strpos( $name, '#' ) !== false ) {
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
+			// </IntraACL>
 			return false;
 		}
 
@@ -1065,6 +1102,11 @@ class User implements IDBAccessObject {
 			Title::newFromText( $name, NS_USER ) : Title::makeTitle( NS_USER, $name );
 		// Check for invalid titles
 		if ( is_null( $t ) || $t->getNamespace() !== NS_USER || $t->isExternal() ) {
+			// <IntraACL>
+			if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+				haclfRestoreTitlePatch( $hacl );
+			}
+			// </IntraACL>
 			return false;
 		}
 
@@ -1092,9 +1134,15 @@ class User implements IDBAccessObject {
 				}
 				break;
 			default:
+				if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+					haclfRestoreTitlePatch( $hacl );
+				}
 				throw new InvalidArgumentException(
 					'Invalid parameter value for $validate in ' . __METHOD__ );
 		}
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch( $hacl );
+		}
 		return $name;
 	}
 
@@ -4358,8 +4406,18 @@ class User implements IDBAccessObject {
 	 * @return string Formatted URL
 	 */
 	protected function getTokenUrl( $page, $token ) {
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			$hacl = haclfDisableTitlePatch();
+		}
+		// </IntraACL>
 		// Hack to bypass localization of 'Special:'
 		$title = Title::makeTitle( NS_MAIN, "Special:$page/$token" );
+		// <IntraACL>
+		if ( defined( 'HACL_HALOACL_VERSION' ) ) {
+			haclfRestoreTitlePatch($hacl);
+		}
+		// </IntraACL>
 		return $title->getCanonicalURL();
 	}
 
